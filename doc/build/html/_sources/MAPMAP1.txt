butools.queues.MAPMAP1
======================

.. currentmodule:: butools.queues

.. np:function:: MAPMAP1

    .. list-table::
        :widths: 25 150

        * - Matlab:
          - :code:`Ret = MAPMAP1(D0, D1, S0, S1, ...)`
        * - Mathematica:
          - :code:`Ret = MAPMAP1[D0, D1, S0, S1, ...]`
        * - Python/Numpy:
          - :code:`Ret = MAPMAP1(D0, D1, S0, S1, ...)`

    Returns various performane measures of a MAP/MAP/1 queue.

    In a MAP/MAP/1 queue both the arrival and the service
    processes are characterized by Markovian arrival 
    processes.

    Parameters
    ----------
    D0 : matrix, shape(N,N)
        The transitions of the arrival MAP not accompanied by
        job arrivals
    D1 : matrix, shape(N,N)
        The transitions of the arrival MAP accompanied by
        job arrivals
    S0 : matrix, shape(N,N)
        The transitions of the service MAP not accompanied by
        job service
    S1 : matrix, shape(N,N)
        The transitions of the service MAP accompanied by
        job service
    further parameters : 
        The rest of the function parameters specify the options
        and the performance measures to be computed.

        The supported performance measures and options in this 
        function are:

        +----------------+--------------------+--------------------------------------+
        | Parameter name | Input parameters   | Output                               |
        +================+====================+======================================+
        | "qlMoms"       | Number of moments  | The queue length moments             |
        +----------------+--------------------+--------------------------------------+
        | "qlDistr"      | A vector of points | The queue length distribution at     |
        |                |                    | the requested points                 |
        +----------------+--------------------+--------------------------------------+
        | "qlDistrMG"    | None               | The vector-matrix parameters of the  |
        |                |                    | matrix-geometrically distributed     |
        |                |                    | queue length distribution            |
        +----------------+--------------------+--------------------------------------+
        | "qlDistrDPH"   | None               | The vector-matrix parameters of the  |
        |                |                    | matrix-geometrically distributed     |
        |                |                    | queue length distribution, converted |
        |                |                    | to a discrete PH representation      |
        +----------------+--------------------+--------------------------------------+
        | "stMoms"       | Number of moments  | The sojourn time moments             |
        +----------------+--------------------+--------------------------------------+
        | "stDistr"      | A vector of points | The sojourn time distribution at the |
        |                |                    | requested points (cummulative, cdf)  |
        +----------------+--------------------+--------------------------------------+
        | "stDistrME"    | None               | The vector-matrix parameters of the  |
        |                |                    | matrix-exponentially distributed     |
        |                |                    | sojourn time distribution            |
        +----------------+--------------------+--------------------------------------+
        | "stDistrPH"    | None               | The vector-matrix parameters of the  |
        |                |                    | matrix-exponentially distributed     |
        |                |                    | sojourn time distribution, converted |
        |                |                    | to a continuous PH representation    |
        +----------------+--------------------+--------------------------------------+
        | "prec"         | The precision      | Numerical precision to check if the  |
        |                |                    | input is valid and it is also used   |
        |                |                    | as a stopping condition when solving |
        |                |                    | the matrix-quadratic equation        |
        +----------------+--------------------+--------------------------------------+

        (The queue length related quantities include the customer 
        in the server, and the sojourn time related quantities 
        include the service times as well)

    Returns
    -------
    Ret : list of the performance measures
        Each entry of the list corresponds to a performance 
        measure requested. If there is just a single item, 
        then it is not put into a list.
   
    Notes
    -----
    "qlDistrMG" and "stDistrME" behave much better numerically than 
    "qlDistrDPH" and "stDistrPH".

    Examples
    ========
    For Matlab:

    >>> D0 = [-8., 1., 2.; 0., -6., 4.; 3., 0., -3.];
    >>> D1 = [4., 1., 0.; 0., 2., 0.; 0., 0., 0.];
    >>> S0 = [-10., 4.; 0., -7.];
    >>> S1 = [5., 1.; 4., 3.];
    >>> [qld, qlm] = MAPMAP1(D0, D1, S0, S1, 'qlDistr', (0:1:10), 'qlMoms', 5);
    >>> disp(qld);
      Columns 1 through 6
          0.67697      0.18891      0.07951     0.032563     0.013182    0.0053087
      Columns 7 through 11
        0.0021328   0.00085583   0.00034322    0.0001376   5.5158e-05
    >>> disp(qlm);
          0.54864        1.306        4.357       19.193       105.39
    >>> [alphap, Ap] = MAPMAP1(D0, D1, S0, S1, 'qlDistrDPH');
    >>> disp(alphap);
         0.067133     0.075328       0.0407     0.047054     0.035736     0.057079
    >>> disp(Ap);
           0.2813     0.046292    0.0076126    0.0034456            0            0
          0.10552      0.33506    0.0083548      0.01223            0            0
          0.17544     0.045811      0.13666     0.010563            0            0
         0.079843      0.20353     0.042265      0.16552            0            0
          0.20818     0.091826      0.05939     0.013516            0            0
           0.1325      0.20874     0.034792     0.065764            0            0
    >>> [alpha, A] = MAPMAP1(D0, D1, S0, S1, 'qlDistrMG');
    >>> disp(alpha);
           0.1111     0.010481      0.10662     -0.80772      0.48646      0.41608
    >>> disp(A);
          0.16291     0.023017       0.1119     -0.13707   -0.0046024      0.28152
         -0.06844      0.32235     -0.06034     0.037524     -0.15214      0.35383
        -0.060271       0.1733     0.035807     0.028632     -0.12729      0.35975
        -0.059415      0.16196     -0.10712      0.18069      -0.1826      0.39939
        -0.059415      0.16196     -0.10712      0.18069      -0.1826      0.39939
        -0.059415      0.16196     -0.10712      0.18069      -0.1826      0.39939
    >>> qldFromDPH = PmfFromDPH(alphap, Ap, (0:1:10));
    >>> disp(qldFromDPH);
      Columns 1 through 6
          0.67697      0.18891      0.07951     0.032563     0.013182    0.0053087
      Columns 7 through 11
        0.0021328   0.00085583   0.00034322    0.0001376   5.5158e-05
    >>> qlmFromMG = MomentsFromMG(alpha, A, 5);
    >>> disp(qlmFromMG);
          0.54864        1.306        4.357       19.193       105.39
    >>> [std, stm] = MAPMAP1(D0, D1, S0, S1, 'stDistr', (0.:0.1:1.), 'stMoms', 5);
    >>> disp(std);
      Columns 1 through 6
       1.1102e-16       0.3122      0.53197      0.68345      0.78667      0.85655
      Columns 7 through 11
          0.90367      0.93538      0.95667      0.97097      0.98055
    >>> disp(stm);
          0.25908      0.13145      0.09911     0.099178      0.12376
    >>> [betap, Bp] = MAPMAP1(D0, D1, S0, S1, 'stDistrPH');
    >>> disp(betap);
          0.27119      0.39548      0.13559      0.19774
    >>> disp(Bp);
          -8.1822       1.8689      0.12464      0.12862
           3.6856      -5.9854     0.047157     0.063652
           1.2252       1.2825      -9.0589      0.94899
          0.34891      0.66063       3.4502      -6.4625
    >>> [beta, B] = MAPMAP1(D0, D1, S0, S1, 'stDistrME');
    >>> disp(beta);
          0.40071      0.26596      0.19675      0.13659            0            0
    >>> disp(B);
          -8.1822        4.607      0.61259      0.21807            0            0
           1.4951      -5.9854      0.51299      0.33032            0            0
          0.24927      0.11789      -9.0589       4.3127            0            0
          0.20579       0.1273      0.75919      -6.4625            0            0
           0.5575      0.23374      0.18872     0.080814          -10            4
          0.44853      0.30439       0.1539     0.099095            0           -7
    >>> stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));
    >>> disp(stdFromPH);
      Columns 1 through 6
                0       0.3122      0.53197      0.68345      0.78667      0.85655
      Columns 7 through 11
          0.90367      0.93538      0.95667      0.97097      0.98055
    >>> stmFromME = MomentsFromME(beta, B, 5);
    >>> disp(stmFromME);
          0.25908      0.13145      0.09911     0.099178      0.12376
    >>> delta = [0.5,0.1,0.4];
    >>> Dm = [-8., 1., 2.; 0., -6., 4.; 3., 0., -3.];
    >>> sigma = [0.2,0.7,0.1];
    >>> S = [-10., 4., 0.; 5., -7., 2.; 1., 2., -8.];
    >>> D0 = Dm;
    >>> D1 = sum(-Dm,2)*delta;
    >>> S0 = S;
    >>> S1 = sum(-S,2)*sigma;
    >>> [qld, qlm] = MAPMAP1(D0, D1, S0, S1, 'qlDistr', (0:1:10), 'qlMoms', 5);
    >>> disp(qld);
      Columns 1 through 6
          0.33826      0.21299       0.1455     0.098491     0.066529     0.044917
      Columns 7 through 11
         0.030323      0.02047     0.013818    0.0093279    0.0062968
    >>> disp(qlm);
           2.0439       10.554       80.619       820.69        10443
    >>> [alphap, Ap] = MAPMAP1(D0, D1, S0, S1, 'qlDistrDPH');
    >>> disp(alphap);
      Columns 1 through 6
         0.074729      0.11816     0.037058     0.019693      0.03096    0.0097648
      Columns 7 through 9
          0.12199      0.18879       0.0606
    >>> disp(Ap);
      Columns 1 through 6
          0.26782      0.31102     0.050454     0.028231     0.032596     0.005318
          0.12042       0.4268     0.051941     0.012693      0.04473    0.0054746
         0.093612      0.29656      0.24254    0.0098678      0.03108     0.025565
          0.25805      0.31793     0.051505     0.027202      0.03332    0.0054287
          0.12382      0.42297     0.053367     0.013052     0.044328     0.005625
         0.095477      0.30306       0.2325     0.010064     0.031762     0.024506
          0.22985      0.33605     0.056865     0.024229     0.035219    0.0059937
          0.13243        0.412     0.058567      0.01396     0.043179    0.0061731
          0.10836      0.32375      0.19362     0.011422      0.03393     0.020408
      Columns 7 through 9
                0            0            0
                0            0            0
                0            0            0
                0            0            0
                0            0            0
                0            0            0
                0            0            0
                0            0            0
                0            0            0
    >>> [alpha, A] = MAPMAP1(D0, D1, S0, S1, 'qlDistrMG');
    >>> disp(alpha);
      Columns 1 through 6
          0.33539      0.11124     -0.11565      0.22684     0.049774     -0.83292
      Columns 7 through 9
          -2.2177       2.6612      0.44353
    >>> disp(A);
      Columns 1 through 6
          0.23011      0.17196    -0.041192      0.15685      0.08314      -1.0418
         0.092072      0.32509    -0.031637     0.067255      0.14976      -1.3362
         0.093673      0.13219      0.17527     0.068436     0.063802      -1.1347
           0.1138      0.13806      0.14334     0.081476     0.066654       -1.121
         0.093316       0.1752      0.12914     0.068173     0.082966      -1.1796
         0.093673      0.13219      0.17527     0.068436     0.063802      -1.1347
         0.093673      0.13219      0.17527     0.068436     0.063802      -1.1347
         0.093673      0.13219      0.17527     0.068436     0.063802      -1.1347
         0.093673      0.13219      0.17527     0.068436     0.063802      -1.1347
      Columns 7 through 9
          -1.0077       1.5932      0.53741
         -0.52827       1.4421      0.49554
         -0.53458       1.0089      0.79874
         -0.60436       1.0951      0.76019
         -0.53317       1.1055      0.73114
         -0.53458       1.0089      0.79874
         -0.53458       1.0089      0.79874
         -0.53458       1.0089      0.79874
         -0.53458       1.0089      0.79874
    >>> qldFromDPH = PmfFromDPH(alphap, Ap, (0:1:10));
    >>> disp(qldFromDPH);
      Columns 1 through 6
          0.33826      0.21299       0.1455     0.098491     0.066529     0.044917
      Columns 7 through 11
         0.030323      0.02047     0.013818    0.0093279    0.0062968
    >>> qlmFromMG = MomentsFromMG(alpha, A, 5);
    >>> disp(qlmFromMG);
           2.0439       10.554       80.619       820.69        10443
    >>> [std, stm] = MAPMAP1(D0, D1, S0, S1, 'stDistr', (0.:0.1:1.), 'stMoms', 5);
    >>> disp(std);
      Columns 1 through 6
       1.1102e-16     0.067321      0.14411      0.21822      0.28688      0.34979
      Columns 7 through 11
          0.40723      0.45962      0.50738      0.55093      0.59062
    >>> disp(stm);
           1.1135       2.4113       7.8173       33.786       182.52
    >>> [betap, Bp] = MAPMAP1(D0, D1, S0, S1, 'stDistrPH');
    >>> disp(betap);
      Columns 1 through 6
          0.35369            0      0.14631     0.070739            0     0.029261
      Columns 7 through 9
          0.28295            0      0.11705
    >>> disp(Bp);
      Columns 1 through 6
          -9.7151       8.1485      0.63533     0.032747     0.049378     0.016146
           3.2004       -6.235      0.94726     0.073403      0.11068     0.036192
          0.28699        6.635        -7.86     0.032986     0.049738     0.016264
          0.28492      0.34127      0.13895      -9.9673       7.8566      0.51253
          0.63864      0.76496      0.31145       2.6351      -6.8893      0.67199
          0.28699      0.34375      0.13996     0.032986        6.341      -7.9837
          0.28492      0.34127      0.13895     0.032747     0.049378     0.016146
          0.63864      0.76496      0.31145     0.073403      0.11068     0.036192
          0.28699      0.34375      0.13996     0.032986     0.049738     0.016264
      Columns 7 through 9
         0.087771      0.17848     0.044593
          0.19674      0.40007     0.099956
         0.088411      0.17978     0.044918
         0.087771      0.17848     0.044593
          0.19674      0.40007     0.099956
         0.088411      0.17978     0.044918
          -9.9122       7.9857      0.54098
           2.7585      -6.5999      0.73576
         0.088411        6.471      -7.9551
    >>> [beta, B] = MAPMAP1(D0, D1, S0, S1, 'stDistrME');
    >>> disp(beta);
      Columns 1 through 6
          0.14329      0.28553     0.071181     0.028658     0.057106     0.014236
      Columns 7 through 9
          0.11463      0.22842     0.056945
    >>> disp(B);
      Columns 1 through 6
          -9.7151       4.9972      0.14246     0.056983      0.19944     0.028492
           5.2186       -6.235       2.1093     0.043712      0.15299     0.021856
           1.2799       2.9797        -7.86     0.055984      0.19594     0.027992
          0.16374      0.57307     0.081868      -9.9673       4.1146     0.016374
          0.15812      0.55341     0.079058       5.0316      -6.8893       2.0158
          0.16264      0.56923     0.081319       1.0325       2.1138      -7.9837
          0.10971        0.384     0.054857     0.021943       0.0768     0.010971
          0.14288      0.50009     0.071442     0.028577      0.10002     0.014288
          0.11229      0.39303     0.056147     0.022459     0.078606     0.011229
      Columns 7 through 9
          0.22793      0.79777      0.11397
          0.17485      0.61196     0.087423
          0.22394      0.78377      0.11197
          0.13099      0.45846     0.065494
          0.12649      0.44273     0.063247
          0.13011      0.45539     0.065055
          -9.9122       4.3072     0.043886
           5.1143      -6.5999       2.0572
           1.0898       2.3144      -7.9551
    >>> stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));
    >>> disp(stdFromPH);
      Columns 1 through 6
                0     0.067321      0.14411      0.21822      0.28688      0.34979
      Columns 7 through 11
          0.40723      0.45962      0.50738      0.55093      0.59062
    >>> stmFromME = MomentsFromME(beta, B, 5);
    >>> disp(stmFromME);
           1.1135       2.4113       7.8173       33.786       182.52

    For Mathematica:

    
    For Python/Numpy:

    >>> D0 = ml.matrix([[-8., 1., 2.],[0., -6., 4.],[3., 0., -3.]])
    >>> D1 = ml.matrix([[4., 1., 0.],[0., 2., 0.],[0., 0., 0.]])
    >>> S0 = ml.matrix([[-10., 4.],[0., -7.]])
    >>> S1 = ml.matrix([[5., 1.],[4., 3.]])
    >>> qld, qlm = MAPMAP1(D0, D1, S0, S1, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5)
    Final Residual Error for G:  2.35922392733e-16
    Final Residual Error for R:  1.31838984174e-16
    >>> print(qld)
    [  6.76969e-01   1.88906e-01   7.95099e-02   3.25628e-02   1.31820e-02   5.30870e-03   2.13277e-03   8.55834e-04   3.43223e-04   1.37603e-04   5.51578e-05]
    >>> print(qlm)
    [0.54863953186413617, 1.3060488095463447, 4.3570044249027839, 19.192953582041419, 105.38633755592997]
    >>> alphap, Ap = MAPMAP1(D0, D1, S0, S1, "qlDistrDPH")
    Final Residual Error for G:  2.35922392733e-16
    Final Residual Error for R:  1.31838984174e-16
    >>> print(alphap)
    [[ 0.06713  0.07533  0.0407   0.04705  0.03574  0.05708]]
    >>> print(Ap)
    [[ 0.2813   0.04629  0.00761  0.00345  0.       0.     ]
     [ 0.10552  0.33506  0.00835  0.01223  0.       0.     ]
     [ 0.17544  0.04581  0.13666  0.01056  0.       0.     ]
     [ 0.07984  0.20353  0.04227  0.16552  0.       0.     ]
     [ 0.20818  0.09183  0.05939  0.01352  0.       0.     ]
     [ 0.1325   0.20874  0.03479  0.06576  0.       0.     ]]
    >>> alpha, A = MAPMAP1(D0, D1, S0, S1, "qlDistrMG")
    Final Residual Error for G:  2.35922392733e-16
    Final Residual Error for R:  1.31838984174e-16
    >>> print(alpha)
    [[ 0.1111   0.01048  0.10662 -0.80772  0.48646  0.41608]]
    >>> print(A)
    [[ 0.16291  0.02302  0.1119  -0.13707 -0.0046   0.28152]
     [-0.06844  0.32235 -0.06034  0.03752 -0.15214  0.35383]
     [-0.06027  0.1733   0.03581  0.02863 -0.12729  0.35975]
     [-0.05942  0.16196 -0.10712  0.18069 -0.1826   0.39939]
     [-0.05942  0.16196 -0.10712  0.18069 -0.1826   0.39939]
     [-0.05942  0.16196 -0.10712  0.18069 -0.1826   0.39939]]
    >>> qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1))
    >>> print(qldFromDPH)
    [  6.76969e-01   1.88906e-01   7.95099e-02   3.25628e-02   1.31820e-02   5.30870e-03   2.13277e-03   8.55834e-04   3.43223e-04   1.37603e-04   5.51578e-05]
    >>> qlmFromMG = MomentsFromMG(alpha, A, 5)
    >>> print(qlmFromMG)
    [0.54863953186413594, 1.3060488095463438, 4.3570044249027813, 19.192953582041405, 105.38633755592987]
    >>> std, stm = MAPMAP1(D0, D1, S0, S1, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
    Final Residual Error for G:  2.35922392733e-16
    Final Residual Error for R:  1.31838984174e-16
    >>> print(std)
    [  1.11022e-16   3.12202e-01   5.31969e-01   6.83448e-01   7.86668e-01   8.56547e-01   9.03672e-01   9.35376e-01   9.56674e-01   9.70967e-01   9.80552e-01]
    >>> print(stm)
    [0.25907977893584216, 0.1314530565761404, 0.099109779753652538, 0.099177840959181612, 0.12375826425492886]
    >>> betap, Bp = MAPMAP1(D0, D1, S0, S1, "stDistrPH")
    Final Residual Error for G:  2.35922392733e-16
    Final Residual Error for R:  1.31838984174e-16
    >>> print(betap)
    [[ 0.27119  0.39548  0.13559  0.19774]]
    >>> print(Bp)
    [[-8.18222  1.86886  0.12464  0.12862]
     [ 3.68562 -5.98538  0.04716  0.06365]
     [ 1.22519  1.28247 -9.05895  0.94899]
     [ 0.34891  0.66063  3.45018 -6.46249]]
    >>> beta, B = MAPMAP1(D0, D1, S0, S1, "stDistrME")
    Final Residual Error for G:  2.35922392733e-16
    Final Residual Error for R:  1.31838984174e-16
    >>> print(beta)
    [[ 0.40071  0.26596  0.19675  0.13659  0.       0.     ]]
    >>> print(B)
    [[ -8.18222   4.60702   0.61259   0.21807   0.        0.     ]
     [  1.49509  -5.98538   0.51299   0.33032   0.        0.     ]
     [  0.24927   0.11789  -9.05895   4.31272   0.        0.     ]
     [  0.20579   0.1273    0.75919  -6.46249   0.        0.     ]
     [  0.5575    0.23374   0.18872   0.08081 -10.        4.     ]
     [  0.44853   0.30439   0.1539    0.09909   0.       -7.     ]]
    >>> stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
    >>> print(stdFromPH)
    [ 0.       0.3122   0.53197  0.68345  0.78667  0.85655  0.90367  0.93538  0.95667  0.97097  0.98055]
    >>> stmFromME = MomentsFromME(beta, B, 5)
    >>> print(stmFromME)
    [0.25907977893584216, 0.1314530565761404, 0.099109779753652524, 0.099177840959181612, 0.12375826425492886]
    >>> delta = ml.matrix([[0.5,0.1,0.4]])
    >>> Dm = ml.matrix([[-8., 1., 2.],[0., -6., 4.],[3., 0., -3.]])
    >>> sigma = ml.matrix([[0.2,0.7,0.1]])
    >>> S = ml.matrix([[-10., 4., 0.],[5., -7., 2.],[1., 2., -8.]])
    >>> D0 = Dm
    >>> D1 = np.sum(-Dm,1)*delta
    >>> S0 = S
    >>> S1 = np.sum(-S,1)*sigma
    >>> qld, qlm = MAPMAP1(D0, D1, S0, S1, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5)
    Final Residual Error for G:  1.80411241502e-16
    Final Residual Error for R:  4.02455846427e-16
    >>> print(qld)
    [ 0.33826  0.21299  0.1455   0.09849  0.06653  0.04492  0.03032  0.02047  0.01382  0.00933  0.0063 ]
    >>> print(qlm)
    [2.0439201904271491, 10.553791196138791, 80.619285377234021, 820.68947862198797, 10442.5288789529]
    >>> alphap, Ap = MAPMAP1(D0, D1, S0, S1, "qlDistrDPH")
    Final Residual Error for G:  1.80411241502e-16
    Final Residual Error for R:  4.02455846427e-16
    >>> print(alphap)
    [[ 0.07473  0.11816  0.03706  0.01969  0.03096  0.00976  0.12199  0.18879  0.0606 ]]
    >>> print(Ap)
    [[ 0.26782  0.31102  0.05045  0.02823  0.0326   0.00532  0.       0.       0.     ]
     [ 0.12042  0.4268   0.05194  0.01269  0.04473  0.00547  0.       0.       0.     ]
     [ 0.09361  0.29656  0.24254  0.00987  0.03108  0.02556  0.       0.       0.     ]
     [ 0.25805  0.31793  0.0515   0.0272   0.03332  0.00543  0.       0.       0.     ]
     [ 0.12382  0.42297  0.05337  0.01305  0.04433  0.00562  0.       0.       0.     ]
     [ 0.09548  0.30306  0.2325   0.01006  0.03176  0.02451  0.       0.       0.     ]
     [ 0.22985  0.33605  0.05686  0.02423  0.03522  0.00599  0.       0.       0.     ]
     [ 0.13243  0.412    0.05857  0.01396  0.04318  0.00617  0.       0.       0.     ]
     [ 0.10836  0.32375  0.19362  0.01142  0.03393  0.02041  0.       0.       0.     ]]
    >>> alpha, A = MAPMAP1(D0, D1, S0, S1, "qlDistrMG")
    Final Residual Error for G:  1.80411241502e-16
    Final Residual Error for R:  4.02455846427e-16
    >>> print(alpha)
    [[ 0.33539  0.11124 -0.11565  0.22684  0.04977 -0.83292 -2.21767  2.66121  0.44353]]
    >>> print(A)
    [[ 0.23011  0.17196 -0.04119  0.15685  0.08314 -1.04185 -1.00769  1.59319  0.53741]
     [ 0.09207  0.32509 -0.03164  0.06726  0.14976 -1.33616 -0.52827  1.44212  0.49554]
     [ 0.09367  0.13219  0.17527  0.06844  0.0638  -1.13474 -0.53458  1.00888  0.79874]
     [ 0.1138   0.13806  0.14334  0.08148  0.06665 -1.12104 -0.60436  1.09506  0.76019]
     [ 0.09332  0.1752   0.12914  0.06817  0.08297 -1.17965 -0.53317  1.10547  0.73114]
     [ 0.09367  0.13219  0.17527  0.06844  0.0638  -1.13474 -0.53458  1.00888  0.79874]
     [ 0.09367  0.13219  0.17527  0.06844  0.0638  -1.13474 -0.53458  1.00888  0.79874]
     [ 0.09367  0.13219  0.17527  0.06844  0.0638  -1.13474 -0.53458  1.00888  0.79874]
     [ 0.09367  0.13219  0.17527  0.06844  0.0638  -1.13474 -0.53458  1.00888  0.79874]]
    >>> qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1))
    >>> print(qldFromDPH)
    [ 0.33826  0.21299  0.1455   0.09849  0.06653  0.04492  0.03032  0.02047  0.01382  0.00933  0.0063 ]
    >>> qlmFromMG = MomentsFromMG(alpha, A, 5)
    >>> print(qlmFromMG)
    [2.0439201904271451, 10.553791196138775, 80.61928537723395, 820.6894786219882, 10442.528878952886]
    >>> std, stm = MAPMAP1(D0, D1, S0, S1, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
    Final Residual Error for G:  1.80411241502e-16
    Final Residual Error for R:  4.02455846427e-16
    >>> print(std)
    [ 0.       0.06732  0.14411  0.21822  0.28688  0.34979  0.40723  0.45962  0.50738  0.55093  0.59062]
    >>> print(stm)
    [1.1135106870764573, 2.411324091748754, 7.817270279651181, 33.785575107609588, 182.52100725089704]
    >>> betap, Bp = MAPMAP1(D0, D1, S0, S1, "stDistrPH")
    Final Residual Error for G:  1.80411241502e-16
    Final Residual Error for R:  4.02455846427e-16
    >>> print(betap)
    [[ 0.35369  0.       0.14631  0.07074  0.       0.02926  0.28295  0.       0.11705]]
    >>> print(Bp)
    [[-9.71508  8.1485   0.63533  0.03275  0.04938  0.01615  0.08777  0.17848  0.04459]
     [ 3.20037 -6.23504  0.94726  0.0734   0.11068  0.03619  0.19674  0.40007  0.09996]
     [ 0.28699  6.63501 -7.86004  0.03299  0.04974  0.01626  0.08841  0.17978  0.04492]
     [ 0.28492  0.34127  0.13895 -9.96725  7.85661  0.51253  0.08777  0.17848  0.04459]
     [ 0.63864  0.76496  0.31145  2.63513 -6.88932  0.67199  0.19674  0.40007  0.09996]
     [ 0.28699  0.34375  0.13996  0.03299  6.341   -7.98374  0.08841  0.17978  0.04492]
     [ 0.28492  0.34127  0.13895  0.03275  0.04938  0.01615 -9.91223  7.98571  0.54098]
     [ 0.63864  0.76496  0.31145  0.0734   0.11068  0.03619  2.75847 -6.59993  0.73576]
     [ 0.28699  0.34375  0.13996  0.03299  0.04974  0.01626  0.08841  6.47105 -7.95508]]
    >>> beta, B = MAPMAP1(D0, D1, S0, S1, "stDistrME")
    Final Residual Error for G:  1.80411241502e-16
    Final Residual Error for R:  4.02455846427e-16
    >>> print(beta)
    [[ 0.14329  0.28553  0.07118  0.02866  0.05711  0.01424  0.11463  0.22842  0.05694]]
    >>> print(B)
    [[-9.71508  4.99721  0.14246  0.05698  0.19944  0.02849  0.22793  0.79777  0.11397]
     [ 5.21856 -6.23504  2.10928  0.04371  0.15299  0.02186  0.17485  0.61196  0.08742]
     [ 1.27992  2.97972 -7.86004  0.05598  0.19594  0.02799  0.22394  0.78377  0.11197]
     [ 0.16374  0.57307  0.08187 -9.96725  4.11461  0.01637  0.13099  0.45846  0.06549]
     [ 0.15812  0.55341  0.07906  5.03162 -6.88932  2.01581  0.12649  0.44273  0.06325]
     [ 0.16264  0.56923  0.08132  1.03253  2.11385 -7.98374  0.13011  0.45539  0.06506]
     [ 0.10971  0.384    0.05486  0.02194  0.0768   0.01097 -9.91223  4.3072   0.04389]
     [ 0.14288  0.50009  0.07144  0.02858  0.10002  0.01429  5.11431 -6.59993  2.05715]
     [ 0.11229  0.39303  0.05615  0.02246  0.07861  0.01123  1.08984  2.31442 -7.95508]]
    >>> stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
    >>> print(stdFromPH)
    [ 0.       0.06732  0.14411  0.21822  0.28688  0.34979  0.40723  0.45962  0.50738  0.55093  0.59062]
    >>> stmFromME = MomentsFromME(beta, B, 5)
    >>> print(stmFromME)
    [1.1135106870764573, 2.411324091748754, 7.8172702796511846, 33.78557510760961, 182.52100725089716]

