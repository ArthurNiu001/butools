butools.mam.FluidStationaryDistr
================================

.. currentmodule:: butools.mam

.. np:function:: FluidStationaryDistr

    .. list-table::
        :widths: 25 150

        * - Matlab:
          - :code:`pi = FluidStationaryDistr (mass0, ini, K, clo, x)`
        * - Mathematica:
          - :code:`pi = FluidStationaryDistr [mass0, ini, K, clo, x]`
        * - Python/Numpy:
          - :code:`pi = FluidStationaryDistr (mass0, ini, K, clo, x)`

    Returns the stationary distribution of a Markovian 
    fluid model at the given points.
    
    Parameters
    ----------
    mass0 : matrix, shape (1,Np+Nm)
        The stationary probability vector of zero level
    ini : matrix, shape (1,Np)
        The initial vector of the stationary density
    K : matrix, shape (Np,Np)
        The matrix parameter of the stationary density
    clo : matrix, shape (Np,Np+Nm)
        The closing matrix of the stationary density
    x : vector, length (K)
        The distribution function is computed at these 
        points.
    
    Returns
    -------
    pi : matrix, shape (K,Nm+Np)
        The ith row of pi is the probability that the fluid
        level is less than or equal to x(i), while being in
        different states of the background process.
    
    Examples
    ========
    For Matlab:

    >>> Q = [-6., 1., 3., 2., 0., 0.; 6., -10., 2., 0., 2., 0.; 3., 7., -12., 0., 0., 2.; 5., 0., 0., -9., 1., 3.; 0., 5., 0., 6., -13., 2.; 0., 0., 5., 3., 7., -15.];
    >>> R = [2., 0., 0., 0., 0., 0.; 0., -4., 0., 0., 0., 0.; 0., 0., -12., 0., 0., 0.; 0., 0., 0., 6., 0., 0.; 0., 0., 0., 0., 0., 0.; 0., 0., 0., 0., 0., -8.];
    >>> x = (0.0:1.0:30.0);
    >>> [mass0, ini, K, clo] = GeneralFluidSolve(Q, R);
    Final Residual Error for Psi:    7.6328e-16
    >>> disp(mass0);
                0     0.082246     0.069492            0     0.023812     0.020724
    >>> disp(ini);
          0.70195      0.20505
    >>> disp(K);
          -2.4698       1.1349
            1.295      -1.1686
    >>> disp(clo);
              0.5     0.061087     0.054574            0      0.01618     0.012595
                0     0.055389     0.043116      0.16667     0.038913     0.032631
    >>> y = FluidStationaryDistr(mass0, ini, K, clo, x);
    >>> disp(y);
                0     0.082246     0.069492            0     0.023812     0.020724
           0.1768      0.11964      0.10108     0.047524     0.040629     0.034482
          0.25236      0.14136      0.11905     0.085106     0.051849     0.043744
          0.29931      0.15521      0.13049      0.10952     0.059068     0.049706
          0.32938       0.1641      0.13783       0.1252     0.063703     0.053534
          0.34868       0.1698      0.14254      0.13527     0.066678     0.055991
          0.36107      0.17346      0.14557      0.14173     0.068587     0.057568
          0.36902      0.17581      0.14751      0.14588     0.069813     0.058581
          0.37413      0.17732      0.14875      0.14854     0.070599      0.05923
           0.3774      0.17829      0.14955      0.15025     0.071104     0.059647
          0.37951      0.17891      0.15007      0.15134     0.071428     0.059915
          0.38086      0.17931       0.1504      0.15205     0.071636     0.060087
          0.38172      0.17956      0.15061       0.1525      0.07177     0.060197
          0.38228      0.17973      0.15074      0.15279     0.071856     0.060268
          0.38264      0.17983      0.15083      0.15298     0.071911     0.060313
          0.38286       0.1799      0.15089       0.1531     0.071946     0.060343
          0.38301      0.17995      0.15092      0.15317     0.071969     0.060361
          0.38311      0.17997      0.15095      0.15322     0.071983     0.060373
          0.38317      0.17999      0.15096      0.15325     0.071993     0.060381
          0.38321         0.18      0.15097      0.15327     0.071999     0.060386
          0.38323      0.18001      0.15098      0.15329     0.072002     0.060389
          0.38325      0.18001      0.15098       0.1533     0.072005     0.060391
          0.38326      0.18002      0.15098       0.1533     0.072006     0.060393
          0.38326      0.18002      0.15098       0.1533     0.072007     0.060393
          0.38327      0.18002      0.15099      0.15331     0.072008     0.060394
          0.38327      0.18002      0.15099      0.15331     0.072009     0.060394
          0.38327      0.18002      0.15099      0.15331     0.072009     0.060394
          0.38327      0.18002      0.15099      0.15331     0.072009     0.060395
          0.38327      0.18002      0.15099      0.15331     0.072009     0.060395
          0.38327      0.18002      0.15099      0.15331     0.072009     0.060395
          0.38327      0.18002      0.15099      0.15331     0.072009     0.060395

    For Mathematica:

    
    For Python/Numpy:

    >>> Q = ml.matrix([[-6., 1., 3., 2., 0., 0.],[6., -10., 2., 0., 2., 0.],[3., 7., -12., 0., 0., 2.],[5., 0., 0., -9., 1., 3.],[0., 5., 0., 6., -13., 2.],[0., 0., 5., 3., 7., -15.]])
    >>> R = ml.matrix([[2., 0., 0., 0., 0., 0.],[0., -4., 0., 0., 0., 0.],[0., 0., -12., 0., 0., 0.],[0., 0., 0., 6., 0., 0.],[0., 0., 0., 0., 0., 0.],[0., 0., 0., 0., 0., -8.]])
    >>> x = np.arange(0.0,31.0,1.0)
    >>> mass0, ini, K, clo = GeneralFluidSolve(Q, R)
    Final Residual Error for G:  6.661338147750939e-16
    >>> print(mass0)
    [[ 0.       0.08225  0.06949  0.       0.02381  0.02072]]
    >>> print(ini)
    [[ 0.70195  0.20505]]
    >>> print(K)
    [[-2.46975  1.13486]
     [ 1.29502 -1.16863]]
    >>> print(clo)
    [[ 0.5      0.06109  0.05457  0.       0.01618  0.01259]
     [ 0.       0.05539  0.04312  0.16667  0.03891  0.03263]]
    >>> y = FluidStationaryDistr(mass0, ini, K, clo, x)
    >>> print(y)
    [[ 0.       0.08225  0.06949  0.       0.02381  0.02072]
     [ 0.1768   0.11964  0.10108  0.04752  0.04063  0.03448]
     [ 0.25236  0.14136  0.11905  0.08511  0.05185  0.04374]
     [ 0.29931  0.15521  0.13049  0.10952  0.05907  0.04971]
     [ 0.32938  0.1641   0.13783  0.1252   0.0637   0.05353]
     [ 0.34868  0.1698   0.14254  0.13527  0.06668  0.05599]
     [ 0.36107  0.17346  0.14557  0.14173  0.06859  0.05757]
     [ 0.36902  0.17581  0.14751  0.14588  0.06981  0.05858]
     [ 0.37413  0.17732  0.14875  0.14854  0.0706   0.05923]
     [ 0.3774   0.17829  0.14955  0.15025  0.0711   0.05965]
     [ 0.37951  0.17891  0.15007  0.15134  0.07143  0.05992]
     [ 0.38086  0.17931  0.1504   0.15205  0.07164  0.06009]
     [ 0.38172  0.17956  0.15061  0.1525   0.07177  0.0602 ]
     [ 0.38228  0.17973  0.15074  0.15279  0.07186  0.06027]
     [ 0.38264  0.17983  0.15083  0.15298  0.07191  0.06031]
     [ 0.38286  0.1799   0.15089  0.1531   0.07195  0.06034]
     [ 0.38301  0.17995  0.15092  0.15317  0.07197  0.06036]
     [ 0.38311  0.17997  0.15095  0.15322  0.07198  0.06037]
     [ 0.38317  0.17999  0.15096  0.15325  0.07199  0.06038]
     [ 0.38321  0.18     0.15097  0.15327  0.072    0.06039]
     [ 0.38323  0.18001  0.15098  0.15329  0.072    0.06039]
     [ 0.38325  0.18001  0.15098  0.1533   0.072    0.06039]
     [ 0.38326  0.18002  0.15098  0.1533   0.07201  0.06039]
     [ 0.38326  0.18002  0.15098  0.1533   0.07201  0.06039]
     [ 0.38327  0.18002  0.15099  0.15331  0.07201  0.06039]
     [ 0.38327  0.18002  0.15099  0.15331  0.07201  0.06039]
     [ 0.38327  0.18002  0.15099  0.15331  0.07201  0.06039]
     [ 0.38327  0.18002  0.15099  0.15331  0.07201  0.06039]
     [ 0.38327  0.18002  0.15099  0.15331  0.07201  0.06039]
     [ 0.38327  0.18002  0.15099  0.15331  0.07201  0.06039]
     [ 0.38327  0.18002  0.15099  0.15331  0.07201  0.06039]]

