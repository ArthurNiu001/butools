import sys
sys.path.append("/home/gabor/github/butools/Python")
import math
import numpy as np
import numpy.matlib as ml
import matplotlib.pyplot as plt
import butools
from butools.utils import *
from butools.ph import *
from butools.dph import *
from butools.map import *
from butools.moments import *
from butools.reptrans import*
from butools.mc import *
from butools.dmap import *
from butools.trace import *
from butools.mam import *
from butools.queues import *
from butools.fitting import *
from contextlib import redirect_stdout
import os


print('---BuTools: Queues package test file---')
print('Enable the verbose messages with the BuToolsVerbose flag')
butools.verbose = True
print('Enable input parameter checking with the BuToolsCheckInput flag')
butools.checkInput = True
np.set_printoptions(precision=5,linewidth=1024)
outFile = open('/home/gabor/github/butools/test/docex/Queues_python.docex','w')
with redirect_stdout(outFile):
    print('=== QBDQueue ===')
    print('>>> B = ml.matrix([[6., 1., 0.],[0., 4., 1.],[2., 0., 0.]])')
    B = ml.matrix([[6., 1., 0.],[0., 4., 1.],[2., 0., 0.]])
    print('>>> F = ml.matrix([[0., 1., 1.],[5., 0., 0.],[1., 3., 0.]])')
    F = ml.matrix([[0., 1., 1.],[5., 0., 0.],[1., 3., 0.]])
    print('>>> L = ml.matrix([[-14., 3., 2.],[0., -14., 4.],[3., 1., -10.]])')
    L = ml.matrix([[-14., 3., 2.],[0., -14., 4.],[3., 1., -10.]])
    print('>>> L0 = L+B')
    L0 = L+B
    print('>>> print(L0)')
    print(L0)
    butools.verbose = False
    pi0, R = QBDSolve(B, L, F, L0)
    lambd = np.sum(pi0*la.inv(ml.eye(R.shape[0])-R)*F)
    butools.verbose = True
    print('>>> qld, qlm = QBDQueue(B, L, F, L0, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5)')
    qld, qlm = QBDQueue(B, L, F, L0, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5)
    print('>>> print(qld)')
    print(qld)
    print('>>> print(qlm)')
    print(qlm)
    print('>>> alphap, Ap = QBDQueue(B, L, F, L0, "qlDistrDPH")')
    alphap, Ap = QBDQueue(B, L, F, L0, "qlDistrDPH")
    print('>>> print(alphap)')
    print(alphap)
    print('>>> print(Ap)')
    print(Ap)
    print('>>> alpha, A = QBDQueue(B, L, F, L0, "qlDistrMG")')
    alpha, A = QBDQueue(B, L, F, L0, "qlDistrMG")
    print('>>> print(alpha)')
    print(alpha)
    print('>>> print(A)')
    print(A)
    print('>>> qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1))')
    qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1))
    print('>>> print(qldFromDPH)')
    print(qldFromDPH)
    print('>>> qlmFromMG = MomentsFromMG(alpha, A, 5)')
    qlmFromMG = MomentsFromMG(alpha, A, 5)
    print('>>> print(qlmFromMG)')
    print(qlmFromMG)
    print('>>> std, stm = QBDQueue(B, L, F, L0, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)')
    std, stm = QBDQueue(B, L, F, L0, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
    print('>>> print(std)')
    print(std)
    print('>>> print(stm)')
    print(stm)
    print('>>> betap, Bp = QBDQueue(B, L, F, L0, "stDistrPH")')
    betap, Bp = QBDQueue(B, L, F, L0, "stDistrPH")
    print('>>> print(betap)')
    print(betap)
    print('>>> print(Bp)')
    print(Bp)
    print('>>> beta, B = QBDQueue(B, L, F, L0, "stDistrME")')
    beta, B = QBDQueue(B, L, F, L0, "stDistrME")
    print('>>> print(beta)')
    print(beta)
    print('>>> print(B)')
    print(B)
    print('>>> stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))')
    stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
    print('>>> print(stdFromPH)')
    print(stdFromPH)
    print('>>> stmFromME = MomentsFromME(beta, B, 5)')
    stmFromME = MomentsFromME(beta, B, 5)
    print('>>> print(stmFromME)')
    print(stmFromME)
    print('=== MAPMAP1 ===')
    print('>>> D0 = ml.matrix([[-8., 1., 2.],[0., -6., 4.],[3., 0., -3.]])')
    D0 = ml.matrix([[-8., 1., 2.],[0., -6., 4.],[3., 0., -3.]])
    print('>>> D1 = ml.matrix([[4., 1., 0.],[0., 2., 0.],[0., 0., 0.]])')
    D1 = ml.matrix([[4., 1., 0.],[0., 2., 0.],[0., 0., 0.]])
    print('>>> S0 = ml.matrix([[-10., 4.],[0., -7.]])')
    S0 = ml.matrix([[-10., 4.],[0., -7.]])
    print('>>> S1 = ml.matrix([[5., 1.],[4., 3.]])')
    S1 = ml.matrix([[5., 1.],[4., 3.]])
    lambd = 1./MarginalMomentsFromMAP(D0, D1, 1)[0]
    print('>>> qld, qlm = MAPMAP1(D0, D1, S0, S1, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5)')
    qld, qlm = MAPMAP1(D0, D1, S0, S1, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5)
    print('>>> print(qld)')
    print(qld)
    print('>>> print(qlm)')
    print(qlm)
    print('>>> alphap, Ap = MAPMAP1(D0, D1, S0, S1, "qlDistrDPH")')
    alphap, Ap = MAPMAP1(D0, D1, S0, S1, "qlDistrDPH")
    print('>>> print(alphap)')
    print(alphap)
    print('>>> print(Ap)')
    print(Ap)
    print('>>> alpha, A = MAPMAP1(D0, D1, S0, S1, "qlDistrMG")')
    alpha, A = MAPMAP1(D0, D1, S0, S1, "qlDistrMG")
    print('>>> print(alpha)')
    print(alpha)
    print('>>> print(A)')
    print(A)
    print('>>> qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1))')
    qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1))
    print('>>> print(qldFromDPH)')
    print(qldFromDPH)
    print('>>> qlmFromMG = MomentsFromMG(alpha, A, 5)')
    qlmFromMG = MomentsFromMG(alpha, A, 5)
    print('>>> print(qlmFromMG)')
    print(qlmFromMG)
    print('>>> std, stm = MAPMAP1(D0, D1, S0, S1, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)')
    std, stm = MAPMAP1(D0, D1, S0, S1, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
    print('>>> print(std)')
    print(std)
    print('>>> print(stm)')
    print(stm)
    print('>>> betap, Bp = MAPMAP1(D0, D1, S0, S1, "stDistrPH")')
    betap, Bp = MAPMAP1(D0, D1, S0, S1, "stDistrPH")
    print('>>> print(betap)')
    print(betap)
    print('>>> print(Bp)')
    print(Bp)
    print('>>> beta, B = MAPMAP1(D0, D1, S0, S1, "stDistrME")')
    beta, B = MAPMAP1(D0, D1, S0, S1, "stDistrME")
    print('>>> print(beta)')
    print(beta)
    print('>>> print(B)')
    print(B)
    print('>>> stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))')
    stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
    print('>>> print(stdFromPH)')
    print(stdFromPH)
    print('>>> stmFromME = MomentsFromME(beta, B, 5)')
    stmFromME = MomentsFromME(beta, B, 5)
    print('>>> print(stmFromME)')
    print(stmFromME)
    IA = ml.eye(D0.shape[0])
    IS = ml.eye(S0.shape[0])
    butools.verbose = False
    gamma, G = QBDQueue(ml.kron(IA, S1), ml.kron(D0, IS)+ml.kron(IA, S0), ml.kron(D1, IS), ml.kron(D0, IS), "stDistrME")
    butools.verbose = True
    msmall = MomentsFromME(beta, B, 5)
    mlarge = MomentsFromME(gamma, G, 5)
    print('>>> delta = ml.matrix([[0.5,0.1,0.4]])')
    delta = ml.matrix([[0.5,0.1,0.4]])
    print('>>> D = ml.matrix([[-8., 1., 2.],[0., -6., 4.],[3., 0., -3.]])')
    D = ml.matrix([[-8., 1., 2.],[0., -6., 4.],[3., 0., -3.]])
    print('>>> sigma = ml.matrix([[0.2,0.7,0.1]])')
    sigma = ml.matrix([[0.2,0.7,0.1]])
    print('>>> S = ml.matrix([[-10., 4., 0.],[5., -7., 2.],[1., 2., -8.]])')
    S = ml.matrix([[-10., 4., 0.],[5., -7., 2.],[1., 2., -8.]])
    print('>>> D0 = D')
    D0 = D
    print('>>> D1 = np.sum(-D,1)*delta')
    D1 = np.sum(-D,1)*delta
    print('>>> S0 = S')
    S0 = S
    print('>>> S1 = np.sum(-S,1)*sigma')
    S1 = np.sum(-S,1)*sigma
    lambd = 1./MarginalMomentsFromMAP(D0, D1, 1)[0]
    print('>>> qld, qlm = MAPMAP1(D0, D1, S0, S1, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5)')
    qld, qlm = MAPMAP1(D0, D1, S0, S1, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5)
    print('>>> print(qld)')
    print(qld)
    print('>>> print(qlm)')
    print(qlm)
    print('>>> alphap, Ap = MAPMAP1(D0, D1, S0, S1, "qlDistrDPH")')
    alphap, Ap = MAPMAP1(D0, D1, S0, S1, "qlDistrDPH")
    print('>>> print(alphap)')
    print(alphap)
    print('>>> print(Ap)')
    print(Ap)
    print('>>> alpha, A = MAPMAP1(D0, D1, S0, S1, "qlDistrMG")')
    alpha, A = MAPMAP1(D0, D1, S0, S1, "qlDistrMG")
    print('>>> print(alpha)')
    print(alpha)
    print('>>> print(A)')
    print(A)
    print('>>> qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1))')
    qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1))
    print('>>> print(qldFromDPH)')
    print(qldFromDPH)
    print('>>> qlmFromMG = MomentsFromMG(alpha, A, 5)')
    qlmFromMG = MomentsFromMG(alpha, A, 5)
    print('>>> print(qlmFromMG)')
    print(qlmFromMG)
    print('>>> std, stm = MAPMAP1(D0, D1, S0, S1, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)')
    std, stm = MAPMAP1(D0, D1, S0, S1, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
    print('>>> print(std)')
    print(std)
    print('>>> print(stm)')
    print(stm)
    print('>>> betap, Bp = MAPMAP1(D0, D1, S0, S1, "stDistrPH")')
    betap, Bp = MAPMAP1(D0, D1, S0, S1, "stDistrPH")
    print('>>> print(betap)')
    print(betap)
    print('>>> print(Bp)')
    print(Bp)
    print('>>> beta, B = MAPMAP1(D0, D1, S0, S1, "stDistrME")')
    beta, B = MAPMAP1(D0, D1, S0, S1, "stDistrME")
    print('>>> print(beta)')
    print(beta)
    print('>>> print(B)')
    print(B)
    print('>>> stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))')
    stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
    print('>>> print(stdFromPH)')
    print(stdFromPH)
    print('>>> stmFromME = MomentsFromME(beta, B, 5)')
    stmFromME = MomentsFromME(beta, B, 5)
    print('>>> print(stmFromME)')
    print(stmFromME)
    IA = ml.eye(D0.shape[0])
    IS = ml.eye(S0.shape[0])
    butools.verbose = False
    gamma, G = QBDQueue(ml.kron(IA, S1), ml.kron(D0, IS)+ml.kron(IA, S0), ml.kron(D1, IS), ml.kron(D0, IS), "stDistrME")
    butools.verbose = True
    msmall = MomentsFromME(beta, B, 5)
    mlarge = MomentsFromME(gamma, G, 5)
    print('=== MMAPPH1PRPR ===')
    print('>>> D0 = ml.matrix([[-5.49, 0., 1.15, 0.],[0., -2.29, 0., 0.],[0., 0.08, -1.32, 0.],[0.72, 1.17, 0.7, -7.07]])')
    D0 = ml.matrix([[-5.49, 0., 1.15, 0.],[0., -2.29, 0., 0.],[0., 0.08, -1.32, 0.],[0.72, 1.17, 0.7, -7.07]])
    print('>>> D1 = ml.matrix([[0.25, 0.38, 0.64, 0.],[0., 0., 0., 1.09],[0., 1.24, 0., 0.],[0.37, 0., 0., 0.]])')
    D1 = ml.matrix([[0.25, 0.38, 0.64, 0.],[0., 0., 0., 1.09],[0., 1.24, 0., 0.],[0.37, 0., 0., 0.]])
    print('>>> D2 = ml.matrix([[0.3, 1.0, 0., 0.48],[0., 0.2, 0., 0.],[0., 0., 0., 0.],[0.61, 0., 0., 0.2]])')
    D2 = ml.matrix([[0.3, 1.0, 0., 0.48],[0., 0.2, 0., 0.],[0., 0., 0., 0.],[0.61, 0., 0., 0.2]])
    print('>>> D3 = ml.matrix([[0., 0.98, 0., 0.31],[0., 0., 1.0, 0.],[0., 0., 0., 0.],[1.1, 0.84, 0.33, 1.03]])')
    D3 = ml.matrix([[0., 0.98, 0., 0.31],[0., 0., 1.0, 0.],[0., 0., 0., 0.],[1.1, 0.84, 0.33, 1.03]])
    print('>>> sigma3 = ml.matrix([[0.83333,0.11404,0.05263]])')
    sigma3 = ml.matrix([[0.83333,0.11404,0.05263]])
    print('>>> S3 = ml.matrix([[-3., 0., 0.],[0.73077, -0.73077, 0.],[0., 0.5, -0.5]])')
    S3 = ml.matrix([[-3., 0., 0.],[0.73077, -0.73077, 0.],[0., 0.5, -0.5]])
    print('>>> sigma2 = ml.matrix([[1.]])')
    sigma2 = ml.matrix([[1.]])
    print('>>> S2 = ml.matrix([[-2.]])')
    S2 = ml.matrix([[-2.]])
    print('>>> sigma1 = ml.matrix([[0.25,0.75]])')
    sigma1 = ml.matrix([[0.25,0.75]])
    print('>>> S1 = ml.matrix([[-2.5, 2.5],[0., -10.]])')
    S1 = ml.matrix([[-2.5, 2.5],[0., -10.]])
    print('>>> qlm, qld = MMAPPH1PRPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "qlMoms", 3, "qlDistr", 500)')
    qlm, qld = MMAPPH1PRPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "qlMoms", 3, "qlDistr", 500)
    momFromDistr = ml.vstack((ml.matrix(np.arange(0,500.0,1)),ml.matrix(np.arange(0,500.0,1)**2),ml.matrix(np.arange(0,500.0,1)**3)))*qld
    print('>>> distrPoints = [1., 5., 10.]')
    distrPoints = [1., 5., 10.]
    print('>>> stm, std = MMAPPH1PRPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "stMoms", 3, "stDistr", distrPoints)')
    stm, std = MMAPPH1PRPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "stMoms", 3, "stDistr", distrPoints)
    print('>>> print(stm)')
    print(stm)
    print('>>> print(std)')
    print(std)
    lambda1 = 1./MarginalMomentsFromMAP(D0+D2+D3, D1, 1)[0]
    lambda2 = 1./MarginalMomentsFromMAP(D0+D1+D3, D2, 1)[0]
    lambda3 = 1./MarginalMomentsFromMAP(D0+D1+D2, D3, 1)[0]
    print('=== MMAPPH1NPPR ===')
    print('>>> D0 = ml.matrix([[-5.49, 0., 1.15, 0.],[0., -2.29, 0., 0.],[0., 0.08, -1.32, 0.],[0.72, 1.17, 0.7, -7.07]])')
    D0 = ml.matrix([[-5.49, 0., 1.15, 0.],[0., -2.29, 0., 0.],[0., 0.08, -1.32, 0.],[0.72, 1.17, 0.7, -7.07]])
    print('>>> D1 = ml.matrix([[0.25, 0.38, 0.64, 0.],[0., 0., 0., 1.09],[0., 1.24, 0., 0.],[0.37, 0., 0., 0.]])')
    D1 = ml.matrix([[0.25, 0.38, 0.64, 0.],[0., 0., 0., 1.09],[0., 1.24, 0., 0.],[0.37, 0., 0., 0.]])
    print('>>> D2 = ml.matrix([[0.3, 1.0, 0., 0.48],[0., 0.2, 0., 0.],[0., 0., 0., 0.],[0.61, 0., 0., 0.2]])')
    D2 = ml.matrix([[0.3, 1.0, 0., 0.48],[0., 0.2, 0., 0.],[0., 0., 0., 0.],[0.61, 0., 0., 0.2]])
    print('>>> D3 = ml.matrix([[0., 0.98, 0., 0.31],[0., 0., 1.0, 0.],[0., 0., 0., 0.],[1.1, 0.84, 0.33, 1.03]])')
    D3 = ml.matrix([[0., 0.98, 0., 0.31],[0., 0., 1.0, 0.],[0., 0., 0., 0.],[1.1, 0.84, 0.33, 1.03]])
    print('>>> sigma3 = ml.matrix([[0.83333,0.11404,0.05263]])')
    sigma3 = ml.matrix([[0.83333,0.11404,0.05263]])
    print('>>> S3 = ml.matrix([[-3., 0., 0.],[0.73077, -0.73077, 0.],[0., 0.5, -0.5]])')
    S3 = ml.matrix([[-3., 0., 0.],[0.73077, -0.73077, 0.],[0., 0.5, -0.5]])
    print('>>> sigma2 = ml.matrix([[1.]])')
    sigma2 = ml.matrix([[1.]])
    print('>>> S2 = ml.matrix([[-2.]])')
    S2 = ml.matrix([[-2.]])
    print('>>> sigma1 = ml.matrix([[0.25,0.75]])')
    sigma1 = ml.matrix([[0.25,0.75]])
    print('>>> S1 = ml.matrix([[-2.5, 2.5],[0., -10.]])')
    S1 = ml.matrix([[-2.5, 2.5],[0., -10.]])
    print('>>> qlm, qld = MMAPPH1NPPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "qlMoms", 3, "qlDistr", 500)')
    qlm, qld = MMAPPH1NPPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "qlMoms", 3, "qlDistr", 500)
    momFromDistr = ml.vstack((ml.matrix(np.arange(0,500.0,1)),ml.matrix(np.arange(0,500.0,1)**2),ml.matrix(np.arange(0,500.0,1)**3)))*qld
    print('>>> distrPoints = [1., 5., 10.]')
    distrPoints = [1., 5., 10.]
    print('>>> stm, std = MMAPPH1NPPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "stMoms", 3, "stDistr", distrPoints)')
    stm, std = MMAPPH1NPPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "stMoms", 3, "stDistr", distrPoints)
    print('>>> print(stm)')
    print(stm)
    print('>>> print(std)')
    print(std)
    lambda1 = 1./MarginalMomentsFromMAP(D0+D2+D3, D1, 1)[0]
    lambda2 = 1./MarginalMomentsFromMAP(D0+D1+D3, D2, 1)[0]
    lambda3 = 1./MarginalMomentsFromMAP(D0+D1+D2, D3, 1)[0]
    print('=== FluidQueue ===')
    print('>>> Q = ml.matrix([[-9., 2., 4., 0., 1., 2.],[6., -25., 5., 3., 7., 4.],[1., 3., -4., 0., 0., 0.],[0., 0., 0., -8., 3., 5.],[7., 3., 0., 2., -13., 1.],[7., 8., 0., 3., 8., -26.]])')
    Q = ml.matrix([[-9., 2., 4., 0., 1., 2.],[6., -25., 5., 3., 7., 4.],[1., 3., -4., 0., 0., 0.],[0., 0., 0., -8., 3., 5.],[7., 3., 0., 2., -13., 1.],[7., 8., 0., 3., 8., -26.]])
    print('>>> vRin = ml.matrix([[4.,2.,1.,0.,0.,3.]])')
    vRin = ml.matrix([[4.,2.,1.,0.,0.,3.]])
    print('>>> vRout = ml.matrix([[6.,2.,0.,0.,3.,2.]])')
    vRout = ml.matrix([[6.,2.,0.,0.,3.,2.]])
    print('>>> Rin = Diag(vRin)')
    Rin = Diag(vRin)
    print('>>> Rout = Diag(vRout)')
    Rout = Diag(vRout)
    lambd = np.sum(CTMCSolve(Q)*Rin)
    print('>>> qld, qlm = FluidQueue(Q, Rin, Rout, "qlDistr", np.arange(0.,1.1,0.1), "qlMoms", 5)')
    qld, qlm = FluidQueue(Q, Rin, Rout, "qlDistr", np.arange(0.,1.1,0.1), "qlMoms", 5)
    print('>>> print(qld)')
    print(qld)
    print('>>> print(qlm)')
    print(qlm)
    print('>>> alphap, Ap = FluidQueue(Q, Rin, Rout, "qlDistrPH")')
    alphap, Ap = FluidQueue(Q, Rin, Rout, "qlDistrPH")
    print('>>> print(alphap)')
    print(alphap)
    print('>>> print(Ap)')
    print(Ap)
    print('>>> alpha, A = FluidQueue(Q, Rin, Rout, "qlDistrME")')
    alpha, A = FluidQueue(Q, Rin, Rout, "qlDistrME")
    print('>>> print(alpha)')
    print(alpha)
    print('>>> print(A)')
    print(A)
    print('>>> qldFromPH = CdfFromPH(alphap, Ap, np.arange(0.,1.1,0.1))')
    qldFromPH = CdfFromPH(alphap, Ap, np.arange(0.,1.1,0.1))
    print('>>> print(qldFromPH)')
    print(qldFromPH)
    print('>>> qlmFromME = MomentsFromME(alpha, A, 5)')
    qlmFromME = MomentsFromME(alpha, A, 5)
    print('>>> print(qlmFromME)')
    print(qlmFromME)
    print('>>> std, stm = FluidQueue(Q, Rin, Rout, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)')
    std, stm = FluidQueue(Q, Rin, Rout, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
    print('>>> print(std)')
    print(std)
    print('>>> print(stm)')
    print(stm)
    print('>>> betap, Bp = FluidQueue(Q, Rin, Rout, "stDistrPH")')
    betap, Bp = FluidQueue(Q, Rin, Rout, "stDistrPH")
    print('>>> print(betap)')
    print(betap)
    print('>>> print(Bp)')
    print(Bp)
    print('>>> beta, B = FluidQueue(Q, Rin, Rout, "stDistrME")')
    beta, B = FluidQueue(Q, Rin, Rout, "stDistrME")
    print('>>> print(beta)')
    print(beta)
    print('>>> print(B)')
    print(B)
    print('>>> stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))')
    stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
    print('>>> print(stdFromPH)')
    print(stdFromPH)
    print('>>> stmFromME = MomentsFromME(beta, B, 5)')
    stmFromME = MomentsFromME(beta, B, 5)
    print('>>> print(stmFromME)')
    print(stmFromME)
    print('=== FluFluQueue ===')
    print('>>> Qin = ml.matrix([[-2., 1., 1.],[2., -5., 3.],[4., 0., -4.]])')
    Qin = ml.matrix([[-2., 1., 1.],[2., -5., 3.],[4., 0., -4.]])
    print('>>> vRin = ml.matrix([[3.,7.,0.]])')
    vRin = ml.matrix([[3.,7.,0.]])
    print('>>> Rin = Diag(vRin)')
    Rin = Diag(vRin)
    print('>>> Qout = ml.matrix([[-4., 1., 3.],[6., -8., 2.],[3., 7., -10.]])')
    Qout = ml.matrix([[-4., 1., 3.],[6., -8., 2.],[3., 7., -10.]])
    print('>>> vRout = ml.matrix([[1.,7.,15.]])')
    vRout = ml.matrix([[1.,7.,15.]])
    print('>>> Rout = Diag(vRout)')
    Rout = Diag(vRout)
    lambd = np.sum(CTMCSolve(Qin)*Rin)
    print('>>> qld, qlm = FluFluQueue(Qin, Rin, Qout, Rout, False, "qlDistr", np.arange(0.,1.1,0.1), "qlMoms", 5)')
    qld, qlm = FluFluQueue(Qin, Rin, Qout, Rout, False, "qlDistr", np.arange(0.,1.1,0.1), "qlMoms", 5)
    print('>>> print(qld)')
    print(qld)
    print('>>> print(qlm)')
    print(qlm)
    print('>>> alphap, Ap = FluFluQueue(Qin, Rin, Qout, Rout, False, "qlDistrPH")')
    alphap, Ap = FluFluQueue(Qin, Rin, Qout, Rout, False, "qlDistrPH")
    print('>>> print(alphap)')
    print(alphap)
    print('>>> print(Ap)')
    print(Ap)
    print('>>> alpha, A = FluFluQueue(Qin, Rin, Qout, Rout, False, "qlDistrME")')
    alpha, A = FluFluQueue(Qin, Rin, Qout, Rout, False, "qlDistrME")
    print('>>> print(alpha)')
    print(alpha)
    print('>>> print(A)')
    print(A)
    print('>>> qldFromPH = CdfFromPH(alphap, Ap, np.arange(0.,1.1,0.1))')
    qldFromPH = CdfFromPH(alphap, Ap, np.arange(0.,1.1,0.1))
    print('>>> print(qldFromPH)')
    print(qldFromPH)
    print('>>> qlmFromME = MomentsFromME(alpha, A, 5)')
    qlmFromME = MomentsFromME(alpha, A, 5)
    print('>>> print(qlmFromME)')
    print(qlmFromME)
    print('>>> std, stm = FluFluQueue(Qin, Rin, Qout, Rout, False, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)')
    std, stm = FluFluQueue(Qin, Rin, Qout, Rout, False, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
    print('>>> print(std)')
    print(std)
    print('>>> print(stm)')
    print(stm)
    print('>>> betap, Bp = FluFluQueue(Qin, Rin, Qout, Rout, False, "stDistrPH")')
    betap, Bp = FluFluQueue(Qin, Rin, Qout, Rout, False, "stDistrPH")
    print('>>> print(betap)')
    print(betap)
    print('>>> print(Bp)')
    print(Bp)
    print('>>> beta, B = FluFluQueue(Qin, Rin, Qout, Rout, False, "stDistrME")')
    beta, B = FluFluQueue(Qin, Rin, Qout, Rout, False, "stDistrME")
    print('>>> print(beta)')
    print(beta)
    print('>>> print(B)')
    print(B)
    print('>>> stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))')
    stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
    print('>>> print(stdFromPH)')
    print(stdFromPH)
    print('>>> stmFromME = MomentsFromME(beta, B, 5)')
    stmFromME = MomentsFromME(beta, B, 5)
    print('>>> print(stmFromME)')
    print(stmFromME)
    Iin = ml.eye(Qin.shape[0])
    Iout = ml.eye(Qout.shape[0])
    butools.verbose = False
    gamma, G = FluidQueue(ml.kron(Qin, Iout)+ml.kron(Iin, Qout), ml.kron(Rin, Iout), ml.kron(Iin, Rout), "stDistrME")
    butools.verbose = True
    msmall = MomentsFromME(beta, B, 5)
    mlarge = MomentsFromME(gamma, G, 5)
    print('>>> qld, qlm = FluFluQueue(Qin, Rin, Qout, Rout, True, "qlDistr", np.arange(0.,1.1,0.1), "qlMoms", 5)')
    qld, qlm = FluFluQueue(Qin, Rin, Qout, Rout, True, "qlDistr", np.arange(0.,1.1,0.1), "qlMoms", 5)
    print('>>> print(qld)')
    print(qld)
    print('>>> print(qlm)')
    print(qlm)
    print('>>> alphap, Ap = FluFluQueue(Qin, Rin, Qout, Rout, True, "qlDistrPH")')
    alphap, Ap = FluFluQueue(Qin, Rin, Qout, Rout, True, "qlDistrPH")
    print('>>> print(alphap)')
    print(alphap)
    print('>>> print(Ap)')
    print(Ap)
    print('>>> alpha, A = FluFluQueue(Qin, Rin, Qout, Rout, True, "qlDistrME")')
    alpha, A = FluFluQueue(Qin, Rin, Qout, Rout, True, "qlDistrME")
    print('>>> print(alpha)')
    print(alpha)
    print('>>> print(A)')
    print(A)
    print('>>> qldFromPH = CdfFromPH(alphap, Ap, np.arange(0.,1.1,0.1))')
    qldFromPH = CdfFromPH(alphap, Ap, np.arange(0.,1.1,0.1))
    print('>>> print(qldFromPH)')
    print(qldFromPH)
    print('>>> qlmFromME = MomentsFromME(alpha, A, 5)')
    qlmFromME = MomentsFromME(alpha, A, 5)
    print('>>> print(qlmFromME)')
    print(qlmFromME)
    print('>>> std, stm = FluFluQueue(Qin, Rin, Qout, Rout, True, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)')
    std, stm = FluFluQueue(Qin, Rin, Qout, Rout, True, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
    print('>>> print(std)')
    print(std)
    print('>>> print(stm)')
    print(stm)
    print('>>> betap, Bp = FluFluQueue(Qin, Rin, Qout, Rout, True, "stDistrPH")')
    betap, Bp = FluFluQueue(Qin, Rin, Qout, Rout, True, "stDistrPH")
    print('>>> print(betap)')
    print(betap)
    print('>>> print(Bp)')
    print(Bp)
    print('>>> beta, B = FluFluQueue(Qin, Rin, Qout, Rout, True, "stDistrME")')
    beta, B = FluFluQueue(Qin, Rin, Qout, Rout, True, "stDistrME")
    print('>>> print(beta)')
    print(beta)
    print('>>> print(B)')
    print(B)
    print('>>> stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))')
    stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
    print('>>> print(stdFromPH)')
    print(stdFromPH)
    print('>>> stmFromME = MomentsFromME(beta, B, 5)')
    stmFromME = MomentsFromME(beta, B, 5)
    print('>>> print(stmFromME)')
    print(stmFromME)
    Iin = ml.eye(Qin.shape[0])
    Iout = ml.eye(Qout.shape[0])
    butools.verbose = False
    gamma, G = FluidQueue(ml.kron(Qin, Iout)+ml.kron(Iin, Qout), ml.kron(Rin, Iout), ml.kron(Iin, Rout), "Q0", ml.kron(Qin, Iout)+ml.kron(Rin, la.pinv(Rout)*Qout), "stDistrME")
    butools.verbose = True
    msmall = MomentsFromME(beta, B, 5)
    mlarge = MomentsFromME(gamma, G, 5)

