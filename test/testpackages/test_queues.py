import sys
sys.path.append("/home/gabor/github/butools/Python")
import math
import numpy as np
import numpy.matlib as ml
import matplotlib.pyplot as plt
import butools
from butools.utils import *
from butools.ph import *
from butools.dph import *
from butools.map import *
from butools.moments import *
from butools.reptrans import*
from butools.mc import *
from butools.dmap import *
from butools.trace import *
from butools.mam import *
from butools.queues import *
from butools.fitting import *
from contextlib import redirect_stdout
import os


print('---BuTools: Queues package test file---')
print('Enable the verbose messages with the BuToolsVerbose flag')
butools.verbose = True
print('Enable input parameter checking with the BuToolsCheckInput flag')
butools.checkInput = True
np.set_printoptions(precision=5,linewidth=1024)
print('========================================')
print('Testing BuTools function QBDQueue')
print('Input:')
print('------')
B = ml.matrix([[6., 1., 0.],[0., 4., 1.],[2., 0., 0.]])
print('B = ')
print(B)
F = ml.matrix([[0., 1., 1.],[5., 0., 0.],[1., 3., 0.]])
print('F = ')
print(F)
L = ml.matrix([[-14., 3., 2.],[0., -14., 4.],[3., 1., -10.]])
print('L = ')
print(L)
L0 = L+B
print('L0 = ')
print(L0)
butools.verbose = False
pi0, R = QBDSolve(B, L, F, L0)
lambd = np.sum(pi0*la.inv(ml.eye(R.shape[0])-R)*F)
butools.verbose = True
print('Test:')
print('-----')
print('qld, qlm = QBDQueue(B, L, F, L0, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5):')
qld, qlm = QBDQueue(B, L, F, L0, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5)
print('qld = ')
print(qld)
print('qlm = ')
print(qlm)
print('alphap, Ap = QBDQueue(B, L, F, L0, "qlDistrDPH"):')
alphap, Ap = QBDQueue(B, L, F, L0, "qlDistrDPH")
print('alphap = ')
print(alphap)
print('Ap = ')
print(Ap)
print('alpha, A = QBDQueue(B, L, F, L0, "qlDistrMG"):')
alpha, A = QBDQueue(B, L, F, L0, "qlDistrMG")
print('alpha = ')
print(alpha)
print('A = ')
print(A)
print('qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1)):')
qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1))
print('qldFromDPH = ')
print(qldFromDPH)
print('qlmFromMG = MomentsFromMG(alpha, A, 5):')
qlmFromMG = MomentsFromMG(alpha, A, 5)
print('qlmFromMG = ')
print(qlmFromMG)
print('std, stm = QBDQueue(B, L, F, L0, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5):')
std, stm = QBDQueue(B, L, F, L0, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
print('std = ')
print(std)
print('stm = ')
print(stm)
print('betap, Bp = QBDQueue(B, L, F, L0, "stDistrPH"):')
betap, Bp = QBDQueue(B, L, F, L0, "stDistrPH")
print('betap = ')
print(betap)
print('Bp = ')
print(Bp)
print('beta, B = QBDQueue(B, L, F, L0, "stDistrME"):')
beta, B = QBDQueue(B, L, F, L0, "stDistrME")
print('beta = ')
print(beta)
print('B = ')
print(B)
print('stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1)):')
stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
print('stdFromPH = ')
print(stdFromPH)
print('stmFromME = MomentsFromME(beta, B, 5):')
stmFromME = MomentsFromME(beta, B, 5)
print('stmFromME = ')
print(stmFromME)
assert CheckMGRepresentation(alpha, A), "QBDQueue: invalid MG representation of the queue length!"
assert CheckMERepresentation(beta, B), "QBDQueue: invalid ME representation of the sojourn time!"
assert CheckDPHRepresentation(alphap, Ap), "QBDQueue: invalid DPH representation of the queue length!"
assert CheckPHRepresentation(betap, Bp), "QBDQueue: invalid PH representation of the sojourn time!"
assert np.abs(qlm[0]-stm[0]*lambd)<10**-12, "QBDQueue: Little formula does not hold!"
assert la.norm((np.array(MomentsFromDPH(alphap, Ap, 5))-np.array(qlmFromMG))/np.array(qlmFromMG))<10**-12, "QBDQueue: the MG and DPH representations are not equal!"
assert la.norm((np.array(MomentsFromPH(betap, Bp, 5))-np.array(stmFromME))/np.array(stmFromME))<10**-12, "QBDQueue: the ME and PH representations are not equal!"
assert la.norm(qld-PmfFromMG(alpha, A, np.arange(0,11.0,1)))<10**-12, "QBDQueue: qlDistr returns wrong queue length distribution!"
assert la.norm(std-CdfFromME(beta, B, np.arange(0.,1.1,0.1)))<10**-12, "QBDQueue: stDistr returns wrong sojourn time distribution!"
assert la.norm((np.array(qlm)-np.array(qlmFromMG))/np.array(qlm))<10**-12, "QBDQueue: qlMoms returns wrong queue length moments!"
assert la.norm((np.array(stm)-np.array(stmFromME))/np.array(stm))<10**-12, "QBDQueue: stMoms returns wrong sojourn time moments!"
print('Input:')
print('------')
B = ml.matrix([[6., 1., 0.],[0., 4., 1.],[2., 0., 0.]])
print('B = ')
print(B)
F = ml.matrix([[0., 0., 0.],[5., 0., 0.],[1., 3., 0.]])
print('F = ')
print(F)
L = ml.matrix([[-12., 3., 2.],[0., -14., 4.],[3., 1., -10.]])
print('L = ')
print(L)
L0 = L+B
print('L0 = ')
print(L0)
butools.verbose = False
pi0, R = QBDSolve(B, L, F, L0)
lambd = np.sum(pi0*la.inv(ml.eye(R.shape[0])-R)*F)
butools.verbose = True
print('Test:')
print('-----')
print('qld, qlm = QBDQueue(B, L, F, L0, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5):')
qld, qlm = QBDQueue(B, L, F, L0, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5)
print('qld = ')
print(qld)
print('qlm = ')
print(qlm)
print('alphap, Ap = QBDQueue(B, L, F, L0, "qlDistrDPH"):')
alphap, Ap = QBDQueue(B, L, F, L0, "qlDistrDPH")
print('alphap = ')
print(alphap)
print('Ap = ')
print(Ap)
print('alpha, A = QBDQueue(B, L, F, L0, "qlDistrMG"):')
alpha, A = QBDQueue(B, L, F, L0, "qlDistrMG")
print('alpha = ')
print(alpha)
print('A = ')
print(A)
print('qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1)):')
qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1))
print('qldFromDPH = ')
print(qldFromDPH)
print('qlmFromMG = MomentsFromMG(alpha, A, 5):')
qlmFromMG = MomentsFromMG(alpha, A, 5)
print('qlmFromMG = ')
print(qlmFromMG)
print('std, stm = QBDQueue(B, L, F, L0, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5):')
std, stm = QBDQueue(B, L, F, L0, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
print('std = ')
print(std)
print('stm = ')
print(stm)
print('betap, Bp = QBDQueue(B, L, F, L0, "stDistrPH"):')
betap, Bp = QBDQueue(B, L, F, L0, "stDistrPH")
print('betap = ')
print(betap)
print('Bp = ')
print(Bp)
print('beta, B = QBDQueue(B, L, F, L0, "stDistrME"):')
beta, B = QBDQueue(B, L, F, L0, "stDistrME")
print('beta = ')
print(beta)
print('B = ')
print(B)
print('stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1)):')
stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
print('stdFromPH = ')
print(stdFromPH)
print('stmFromME = MomentsFromME(beta, B, 5):')
stmFromME = MomentsFromME(beta, B, 5)
print('stmFromME = ')
print(stmFromME)
assert CheckMGRepresentation(alpha, A), "QBDQueue: invalid MG representation of the queue length!"
assert CheckMERepresentation(beta, B), "QBDQueue: invalid ME representation of the sojourn time!"
assert CheckDPHRepresentation(alphap, Ap), "QBDQueue: invalid DPH representation of the queue length!"
assert CheckPHRepresentation(betap, Bp), "QBDQueue: invalid PH representation of the sojourn time!"
assert np.abs(qlm[0]-stm[0]*lambd)<10**-12, "QBDQueue: Little formula does not hold!"
assert la.norm((np.array(MomentsFromDPH(alphap, Ap, 5))-np.array(qlmFromMG))/np.array(qlmFromMG))<10**-12, "QBDQueue: the MG and DPH representations are not equal!"
assert la.norm((np.array(MomentsFromPH(betap, Bp, 5))-np.array(stmFromME))/np.array(stmFromME))<10**-12, "QBDQueue: the ME and PH representations are not equal!"
assert la.norm(qld-PmfFromMG(alpha, A, np.arange(0,11.0,1)))<10**12, "QBDQueue: qlDistr returns wrong queue length distribution!"
assert la.norm(std-CdfFromME(beta, B, np.arange(0.,1.1,0.1)))<10**12, "QBDQueue: stDistr returns wrong sojourn time distribution!"
assert la.norm((np.array(qlm)-np.array(qlmFromMG))/np.array(qlm))<10**12, "QBDQueue: qlMoms returns wrong queue length moments!"
assert la.norm((np.array(stm)-np.array(stmFromME))/np.array(stm))<10**12, "QBDQueue: stMoms returns wrong sojourn time moments!"
print('Input:')
print('------')
B = ml.matrix([[6., 1., 0.],[0., 5., 0.],[0., 0., 0.]])
print('B = ')
print(B)
F = ml.matrix([[0., 3., 1.],[0., 5., 0.],[0., 0., 0.]])
print('F = ')
print(F)
L = ml.matrix([[-16., 3., 2.],[0., -14., 4.],[3., 1., -4.]])
print('L = ')
print(L)
L0 = ml.matrix([[-14., 10., 0.],[5., -10., 0.],[3., 1., -4.]])
print('L0 = ')
print(L0)
butools.verbose = False
pi0, R = QBDSolve(B, L, F, L0)
lambd = np.sum(pi0*la.inv(ml.eye(R.shape[0])-R)*F)
butools.verbose = True
print('Test:')
print('-----')
print('qld, qlm = QBDQueue(B, L, F, L0, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5):')
qld, qlm = QBDQueue(B, L, F, L0, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5)
print('qld = ')
print(qld)
print('qlm = ')
print(qlm)
print('alphap, Ap = QBDQueue(B, L, F, L0, "qlDistrDPH"):')
alphap, Ap = QBDQueue(B, L, F, L0, "qlDistrDPH")
print('alphap = ')
print(alphap)
print('Ap = ')
print(Ap)
print('alpha, A = QBDQueue(B, L, F, L0, "qlDistrMG"):')
alpha, A = QBDQueue(B, L, F, L0, "qlDistrMG")
print('alpha = ')
print(alpha)
print('A = ')
print(A)
print('qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1)):')
qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1))
print('qldFromDPH = ')
print(qldFromDPH)
print('qlmFromMG = MomentsFromMG(alpha, A, 5):')
qlmFromMG = MomentsFromMG(alpha, A, 5)
print('qlmFromMG = ')
print(qlmFromMG)
print('std, stm = QBDQueue(B, L, F, L0, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5):')
std, stm = QBDQueue(B, L, F, L0, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
print('std = ')
print(std)
print('stm = ')
print(stm)
print('betap, Bp = QBDQueue(B, L, F, L0, "stDistrPH"):')
betap, Bp = QBDQueue(B, L, F, L0, "stDistrPH")
print('betap = ')
print(betap)
print('Bp = ')
print(Bp)
print('beta, B = QBDQueue(B, L, F, L0, "stDistrME"):')
beta, B = QBDQueue(B, L, F, L0, "stDistrME")
print('beta = ')
print(beta)
print('B = ')
print(B)
print('stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1)):')
stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
print('stdFromPH = ')
print(stdFromPH)
print('stmFromME = MomentsFromME(beta, B, 5):')
stmFromME = MomentsFromME(beta, B, 5)
print('stmFromME = ')
print(stmFromME)
assert CheckMGRepresentation(alpha, A), "QBDQueue: invalid MG representation of the queue length!"
assert CheckMERepresentation(beta, B), "QBDQueue: invalid ME representation of the sojourn time!"
assert CheckDPHRepresentation(alphap, Ap), "QBDQueue: invalid DPH representation of the queue length!"
assert CheckPHRepresentation(betap, Bp), "QBDQueue: invalid PH representation of the sojourn time!"
assert np.abs(qlm[0]-stm[0]*lambd)<10**12, "QBDQueue: Little formula does not hold!"
assert la.norm((np.array(MomentsFromDPH(alphap, Ap, 5))-np.array(qlmFromMG))/np.array(qlmFromMG))<10**12, "QBDQueue: the MG and DPH representations are not equal!"
assert la.norm((np.array(MomentsFromPH(betap, Bp, 5))-np.array(stmFromME))/np.array(stmFromME))<10**12, "QBDQueue: the ME and PH representations are not equal!"
assert la.norm(qld-PmfFromMG(alpha, A, np.arange(0,11.0,1)))<10**12, "QBDQueue: qlDistr returns wrong queue length distribution!"
assert la.norm(std-CdfFromME(beta, B, np.arange(0.,1.1,0.1)))<10**12, "QBDQueue: stDistr returns wrong sojourn time distribution!"
assert la.norm((np.array(qlm)-np.array(qlmFromMG))/np.array(qlm))<10**12, "QBDQueue: qlMoms returns wrong queue length moments!"
assert la.norm((np.array(stm)-np.array(stmFromME))/np.array(stm))<10**12, "QBDQueue: stMoms returns wrong sojourn time moments!"
print('Input:')
print('------')
B = ml.matrix([[0., 0.],[3., 4.]])
print('B = ')
print(B)
F = ml.matrix([[1., 0.],[2., 0.]])
print('F = ')
print(F)
L = ml.matrix([[-6., 5.],[3., -12.]])
print('L = ')
print(L)
L0 = ml.matrix([[-6., 5.],[6., -8.]])
print('L0 = ')
print(L0)
butools.verbose = False
pi0, R = QBDSolve(B, L, F, L0)
lambd = np.sum(pi0*la.inv(ml.eye(R.shape[0])-R)*F)
butools.verbose = True
print('Test:')
print('-----')
print('qld, qlm = QBDQueue(B, L, F, L0, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5):')
qld, qlm = QBDQueue(B, L, F, L0, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5)
print('qld = ')
print(qld)
print('qlm = ')
print(qlm)
print('alphap, Ap = QBDQueue(B, L, F, L0, "qlDistrDPH"):')
alphap, Ap = QBDQueue(B, L, F, L0, "qlDistrDPH")
print('alphap = ')
print(alphap)
print('Ap = ')
print(Ap)
print('alpha, A = QBDQueue(B, L, F, L0, "qlDistrMG"):')
alpha, A = QBDQueue(B, L, F, L0, "qlDistrMG")
print('alpha = ')
print(alpha)
print('A = ')
print(A)
print('qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1)):')
qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1))
print('qldFromDPH = ')
print(qldFromDPH)
print('qlmFromMG = MomentsFromMG(alpha, A, 5):')
qlmFromMG = MomentsFromMG(alpha, A, 5)
print('qlmFromMG = ')
print(qlmFromMG)
print('std, stm = QBDQueue(B, L, F, L0, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5):')
std, stm = QBDQueue(B, L, F, L0, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
print('std = ')
print(std)
print('stm = ')
print(stm)
print('betap, Bp = QBDQueue(B, L, F, L0, "stDistrPH"):')
betap, Bp = QBDQueue(B, L, F, L0, "stDistrPH")
print('betap = ')
print(betap)
print('Bp = ')
print(Bp)
print('beta, B = QBDQueue(B, L, F, L0, "stDistrME"):')
beta, B = QBDQueue(B, L, F, L0, "stDistrME")
print('beta = ')
print(beta)
print('B = ')
print(B)
print('stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1)):')
stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
print('stdFromPH = ')
print(stdFromPH)
print('stmFromME = MomentsFromME(beta, B, 5):')
stmFromME = MomentsFromME(beta, B, 5)
print('stmFromME = ')
print(stmFromME)
assert CheckMGRepresentation(alpha, A), "QBDQueue: invalid MG representation of the queue length!"
assert CheckMERepresentation(beta, B), "QBDQueue: invalid ME representation of the sojourn time!"
assert CheckDPHRepresentation(alphap, Ap), "QBDQueue: invalid DPH representation of the queue length!"
assert CheckPHRepresentation(betap, Bp), "QBDQueue: invalid PH representation of the sojourn time!"
assert np.abs(qlm[0]-stm[0]*lambd)<10**12, "QBDQueue: Little formula does not hold!"
assert la.norm((np.array(MomentsFromDPH(alphap, Ap, 5))-np.array(qlmFromMG))/np.array(qlmFromMG))<10**12, "QBDQueue: the MG and DPH representations are not equal!"
assert la.norm((np.array(MomentsFromPH(betap, Bp, 5))-np.array(stmFromME))/np.array(stmFromME))<10**12, "QBDQueue: the ME and PH representations are not equal!"
assert la.norm(qld-PmfFromMG(alpha, A, np.arange(0,11.0,1)))<10**12, "QBDQueue: qlDistr returns wrong queue length distribution!"
assert la.norm(std-CdfFromME(beta, B, np.arange(0.,1.1,0.1)))<10**12, "QBDQueue: stDistr returns wrong sojourn time distribution!"
assert la.norm((np.array(qlm)-np.array(qlmFromMG))/np.array(qlm))<10**12, "QBDQueue: qlMoms returns wrong queue length moments!"
assert la.norm((np.array(stm)-np.array(stmFromME))/np.array(stm))<10**12, "QBDQueue: stMoms returns wrong sojourn time moments!"
print('========================================')
print('Testing BuTools function MAPMAP1')
print('Input:')
print('------')
D0 = ml.matrix([[-8., 1., 2.],[0., -6., 4.],[3., 0., -3.]])
print('D0 = ')
print(D0)
D1 = ml.matrix([[4., 1., 0.],[0., 2., 0.],[0., 0., 0.]])
print('D1 = ')
print(D1)
S0 = ml.matrix([[-10., 4.],[0., -7.]])
print('S0 = ')
print(S0)
S1 = ml.matrix([[5., 1.],[4., 3.]])
print('S1 = ')
print(S1)
lambd = 1./MarginalMomentsFromMAP(D0, D1, 1)[0]
print('Test:')
print('-----')
print('qld, qlm = MAPMAP1(D0, D1, S0, S1, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5):')
qld, qlm = MAPMAP1(D0, D1, S0, S1, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5)
print('qld = ')
print(qld)
print('qlm = ')
print(qlm)
print('alphap, Ap = MAPMAP1(D0, D1, S0, S1, "qlDistrDPH"):')
alphap, Ap = MAPMAP1(D0, D1, S0, S1, "qlDistrDPH")
print('alphap = ')
print(alphap)
print('Ap = ')
print(Ap)
print('alpha, A = MAPMAP1(D0, D1, S0, S1, "qlDistrMG"):')
alpha, A = MAPMAP1(D0, D1, S0, S1, "qlDistrMG")
print('alpha = ')
print(alpha)
print('A = ')
print(A)
print('qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1)):')
qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1))
print('qldFromDPH = ')
print(qldFromDPH)
print('qlmFromMG = MomentsFromMG(alpha, A, 5):')
qlmFromMG = MomentsFromMG(alpha, A, 5)
print('qlmFromMG = ')
print(qlmFromMG)
print('std, stm = MAPMAP1(D0, D1, S0, S1, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5):')
std, stm = MAPMAP1(D0, D1, S0, S1, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
print('std = ')
print(std)
print('stm = ')
print(stm)
print('betap, Bp = MAPMAP1(D0, D1, S0, S1, "stDistrPH"):')
betap, Bp = MAPMAP1(D0, D1, S0, S1, "stDistrPH")
print('betap = ')
print(betap)
print('Bp = ')
print(Bp)
print('beta, B = MAPMAP1(D0, D1, S0, S1, "stDistrME"):')
beta, B = MAPMAP1(D0, D1, S0, S1, "stDistrME")
print('beta = ')
print(beta)
print('B = ')
print(B)
print('stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1)):')
stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
print('stdFromPH = ')
print(stdFromPH)
print('stmFromME = MomentsFromME(beta, B, 5):')
stmFromME = MomentsFromME(beta, B, 5)
print('stmFromME = ')
print(stmFromME)
assert CheckMGRepresentation(alpha, A), "MAPMAP1: invalid MG representation of the queue length!"
assert CheckMERepresentation(beta, B), "MAPMAP1: invalid ME representation of the sojourn time!"
assert CheckDPHRepresentation(alphap, Ap), "MAPMAP1: invalid DPH representation of the queue length!"
assert CheckPHRepresentation(betap, Bp), "MAPMAP1: invalid PH representation of the sojourn time!"
assert np.abs(qlm[0]-stm[0]*lambd)<10**12, "MAPMAP1: Little formula does not hold!"
assert la.norm((np.array(MomentsFromDPH(alphap, Ap, 5))-np.array(qlmFromMG))/np.array(qlmFromMG))<10**12, "MAPMAP1: the MG and DPH representations are not equal!"
assert la.norm((np.array(MomentsFromPH(betap, Bp, 5))-np.array(stmFromME))/np.array(stmFromME))<10**12, "MAPMAP1: the ME and PH representations are not equal!"
assert la.norm(qld-PmfFromMG(alpha, A, np.arange(0,11.0,1)))<10**12, "MAPMAP1: qlDistr returns wrong queue length distribution!"
assert la.norm(std-CdfFromME(beta, B, np.arange(0.,1.1,0.1)))<10**12, "MAPMAP1: stDistr returns wrong sojourn time distribution!"
assert la.norm((np.array(qlm)-np.array(qlmFromMG))/np.array(qlm))<10**12, "MAPMAP1: qlMoms returns wrong queue length moments!"
assert la.norm((np.array(stm)-np.array(stmFromME))/np.array(stm))<10**12, "MAPMAP1: stMoms returns wrong sojourn time moments!"
IA = ml.eye(D0.shape[0])
IS = ml.eye(S0.shape[0])
butools.verbose = False
gamma, G = QBDQueue(ml.kron(IA, S1), ml.kron(D0, IS)+ml.kron(IA, S0), ml.kron(D1, IS), ml.kron(D0, IS), "stDistrME")
butools.verbose = True
msmall = MomentsFromME(beta, B, 5)
mlarge = MomentsFromME(gamma, G, 5)
assert la.norm((np.array(msmall)-np.array(mlarge))/np.array(msmall))<10**12, "MAPMAP1: Large and small model does not give the same results!"
print('Input:')
print('------')
delta = ml.matrix([[0.5,0.1,0.4]])
print('delta = ')
print(delta)
Dm = ml.matrix([[-8., 1., 2.],[0., -6., 4.],[3., 0., -3.]])
print('Dm = ')
print(Dm)
sigma = ml.matrix([[0.2,0.7,0.1]])
print('sigma = ')
print(sigma)
S = ml.matrix([[-10., 4., 0.],[5., -7., 2.],[1., 2., -8.]])
print('S = ')
print(S)
print('D0 = Dm:')
D0 = Dm
print('D1 = np.sum(-Dm,1)*delta:')
D1 = np.sum(-Dm,1)*delta
print('S0 = S:')
S0 = S
print('S1 = np.sum(-S,1)*sigma:')
S1 = np.sum(-S,1)*sigma
lambd = 1./MarginalMomentsFromMAP(D0, D1, 1)[0]
print('Test:')
print('-----')
print('qld, qlm = MAPMAP1(D0, D1, S0, S1, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5):')
qld, qlm = MAPMAP1(D0, D1, S0, S1, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5)
print('qld = ')
print(qld)
print('qlm = ')
print(qlm)
print('alphap, Ap = MAPMAP1(D0, D1, S0, S1, "qlDistrDPH"):')
alphap, Ap = MAPMAP1(D0, D1, S0, S1, "qlDistrDPH")
print('alphap = ')
print(alphap)
print('Ap = ')
print(Ap)
print('alpha, A = MAPMAP1(D0, D1, S0, S1, "qlDistrMG"):')
alpha, A = MAPMAP1(D0, D1, S0, S1, "qlDistrMG")
print('alpha = ')
print(alpha)
print('A = ')
print(A)
print('qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1)):')
qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1))
print('qldFromDPH = ')
print(qldFromDPH)
print('qlmFromMG = MomentsFromMG(alpha, A, 5):')
qlmFromMG = MomentsFromMG(alpha, A, 5)
print('qlmFromMG = ')
print(qlmFromMG)
print('std, stm = MAPMAP1(D0, D1, S0, S1, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5):')
std, stm = MAPMAP1(D0, D1, S0, S1, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
print('std = ')
print(std)
print('stm = ')
print(stm)
print('betap, Bp = MAPMAP1(D0, D1, S0, S1, "stDistrPH"):')
betap, Bp = MAPMAP1(D0, D1, S0, S1, "stDistrPH")
print('betap = ')
print(betap)
print('Bp = ')
print(Bp)
print('beta, B = MAPMAP1(D0, D1, S0, S1, "stDistrME"):')
beta, B = MAPMAP1(D0, D1, S0, S1, "stDistrME")
print('beta = ')
print(beta)
print('B = ')
print(B)
print('stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1)):')
stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
print('stdFromPH = ')
print(stdFromPH)
print('stmFromME = MomentsFromME(beta, B, 5):')
stmFromME = MomentsFromME(beta, B, 5)
print('stmFromME = ')
print(stmFromME)
assert CheckMGRepresentation(alpha, A), "MAPMAP1: invalid MG representation of the queue length!"
assert CheckMERepresentation(beta, B), "MAPMAP1: invalid ME representation of the sojourn time!"
assert CheckDPHRepresentation(alphap, Ap), "MAPMAP1: invalid DPH representation of the queue length!"
assert CheckPHRepresentation(betap, Bp), "MAPMAP1: invalid PH representation of the sojourn time!"
assert np.abs(qlm[0]-stm[0]*lambd)<10**12, "MAPMAP1: Little formula does not hold!"
assert la.norm((np.array(MomentsFromDPH(alphap, Ap, 5))-np.array(qlmFromMG))/np.array(qlmFromMG))<10**12, "MAPMAP1: the MG and DPH representations are not equal!"
assert la.norm((np.array(MomentsFromPH(betap, Bp, 5))-np.array(stmFromME))/np.array(stmFromME))<10**12, "MAPMAP1: the ME and PH representations are not equal!"
assert la.norm(qld-PmfFromMG(alpha, A, np.arange(0,11.0,1)))<10**12, "MAPMAP1: qlDistr returns wrong queue length distribution!"
assert la.norm(std-CdfFromME(beta, B, np.arange(0.,1.1,0.1)))<10**12, "MAPMAP1: stDistr returns wrong sojourn time distribution!"
assert la.norm((np.array(qlm)-np.array(qlmFromMG))/np.array(qlm))<10**12, "MAPMAP1: qlMoms returns wrong queue length moments!"
assert la.norm((np.array(stm)-np.array(stmFromME))/np.array(stm))<10**12, "MAPMAP1: stMoms returns wrong sojourn time moments!"
IA = ml.eye(D0.shape[0])
IS = ml.eye(S0.shape[0])
butools.verbose = False
gamma, G = QBDQueue(ml.kron(IA, S1), ml.kron(D0, IS)+ml.kron(IA, S0), ml.kron(D1, IS), ml.kron(D0, IS), "stDistrME")
butools.verbose = True
msmall = MomentsFromME(beta, B, 5)
mlarge = MomentsFromME(gamma, G, 5)
assert la.norm((np.array(msmall)-np.array(mlarge))/np.array(msmall))<10**12, "MAPMAP1: Large and small model does not give the same results!"
print('Input:')
print('------')
D0 = ml.matrix([[-8., 2.],[1., -3.]])
print('D0 = ')
print(D0)
D1 = ml.matrix([[1., 5.],[0., 2.]])
print('D1 = ')
print(D1)
S0 = ml.matrix([[-10., 4.],[0., -7.]])
print('S0 = ')
print(S0)
S1 = ml.matrix([[5., 1.],[4., 3.]])
print('S1 = ')
print(S1)
lambd = 1./MarginalMomentsFromMAP(D0, D1, 1)[0]
print('Test:')
print('-----')
print('qld, qlm = MAPMAP1(D0, D1, S0, S1, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5):')
qld, qlm = MAPMAP1(D0, D1, S0, S1, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5)
print('qld = ')
print(qld)
print('qlm = ')
print(qlm)
print('alphap, Ap = MAPMAP1(D0, D1, S0, S1, "qlDistrDPH"):')
alphap, Ap = MAPMAP1(D0, D1, S0, S1, "qlDistrDPH")
print('alphap = ')
print(alphap)
print('Ap = ')
print(Ap)
print('alpha, A = MAPMAP1(D0, D1, S0, S1, "qlDistrMG"):')
alpha, A = MAPMAP1(D0, D1, S0, S1, "qlDistrMG")
print('alpha = ')
print(alpha)
print('A = ')
print(A)
print('qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1)):')
qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1))
print('qldFromDPH = ')
print(qldFromDPH)
print('qlmFromMG = MomentsFromMG(alpha, A, 5):')
qlmFromMG = MomentsFromMG(alpha, A, 5)
print('qlmFromMG = ')
print(qlmFromMG)
print('std, stm = MAPMAP1(D0, D1, S0, S1, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5):')
std, stm = MAPMAP1(D0, D1, S0, S1, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
print('std = ')
print(std)
print('stm = ')
print(stm)
print('betap, Bp = MAPMAP1(D0, D1, S0, S1, "stDistrPH"):')
betap, Bp = MAPMAP1(D0, D1, S0, S1, "stDistrPH")
print('betap = ')
print(betap)
print('Bp = ')
print(Bp)
print('beta, B = MAPMAP1(D0, D1, S0, S1, "stDistrME"):')
beta, B = MAPMAP1(D0, D1, S0, S1, "stDistrME")
print('beta = ')
print(beta)
print('B = ')
print(B)
print('stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1)):')
stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
print('stdFromPH = ')
print(stdFromPH)
print('stmFromME = MomentsFromME(beta, B, 5):')
stmFromME = MomentsFromME(beta, B, 5)
print('stmFromME = ')
print(stmFromME)
assert CheckMGRepresentation(alpha, A), "MAPMAP1: invalid MG representation of the queue length!"
assert CheckMERepresentation(beta, B), "MAPMAP1: invalid ME representation of the sojourn time!"
assert CheckDPHRepresentation(alphap, Ap), "MAPMAP1: invalid DPH representation of the queue length!"
assert CheckPHRepresentation(betap, Bp), "MAPMAP1: invalid PH representation of the sojourn time!"
assert np.abs(qlm[0]-stm[0]*lambd)<10**12, "MAPMAP1: Little formula does not hold!"
assert la.norm((np.array(MomentsFromDPH(alphap, Ap, 5))-np.array(qlmFromMG))/np.array(qlmFromMG))<10**12, "MAPMAP1: the MG and DPH representations are not equal!"
assert la.norm((np.array(MomentsFromPH(betap, Bp, 5))-np.array(stmFromME))/np.array(stmFromME))<10**12, "MAPMAP1: the ME and PH representations are not equal!"
assert la.norm(qld-PmfFromMG(alpha, A, np.arange(0,11.0,1)))<10**12, "MAPMAP1: qlDistr returns wrong queue length distribution!"
assert la.norm(std-CdfFromME(beta, B, np.arange(0.,1.1,0.1)))<10**12, "MAPMAP1: stDistr returns wrong sojourn time distribution!"
assert la.norm((np.array(qlm)-np.array(qlmFromMG))/np.array(qlm))<10**12, "MAPMAP1: qlMoms returns wrong queue length moments!"
assert la.norm((np.array(stm)-np.array(stmFromME))/np.array(stm))<10**12, "MAPMAP1: stMoms returns wrong sojourn time moments!"
IA = ml.eye(D0.shape[0])
IS = ml.eye(S0.shape[0])
butools.verbose = False
gamma, G = QBDQueue(ml.kron(IA, S1), ml.kron(D0, IS)+ml.kron(IA, S0), ml.kron(D1, IS), ml.kron(D0, IS), "stDistrME")
butools.verbose = True
msmall = MomentsFromME(beta, B, 5)
mlarge = MomentsFromME(gamma, G, 5)
assert la.norm((np.array(msmall)-np.array(mlarge))/np.array(msmall))<10**12, "MAPMAP1: Large and small model does not give the same results!"
print('Input:')
print('------')
S0 = ml.matrix([[-10., 4., 0.],[5., -7., 2.],[1., 2., -8.]])
print('S0 = ')
print(S0)
S1 = ml.matrix([[0., 0., 6.],[0., 0., 0.],[0., 3., 2.]])
print('S1 = ')
print(S1)
D0 = ml.matrix([[-8., 1., 2.],[0., -6., 4.],[3., 0., -3.]])
print('D0 = ')
print(D0)
D1 = ml.matrix([[4., 1., 0.],[0., 0., 2.],[0., 0., 0.]])
print('D1 = ')
print(D1)
lambd = 1./MarginalMomentsFromMAP(D0, D1, 1)[0]
print('Test:')
print('-----')
print('qld, qlm = MAPMAP1(D0, D1, S0, S1, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5):')
qld, qlm = MAPMAP1(D0, D1, S0, S1, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5)
print('qld = ')
print(qld)
print('qlm = ')
print(qlm)
print('alphap, Ap = MAPMAP1(D0, D1, S0, S1, "qlDistrDPH"):')
alphap, Ap = MAPMAP1(D0, D1, S0, S1, "qlDistrDPH")
print('alphap = ')
print(alphap)
print('Ap = ')
print(Ap)
print('alpha, A = MAPMAP1(D0, D1, S0, S1, "qlDistrMG"):')
alpha, A = MAPMAP1(D0, D1, S0, S1, "qlDistrMG")
print('alpha = ')
print(alpha)
print('A = ')
print(A)
print('qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1)):')
qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1))
print('qldFromDPH = ')
print(qldFromDPH)
print('qlmFromMG = MomentsFromMG(alpha, A, 5):')
qlmFromMG = MomentsFromMG(alpha, A, 5)
print('qlmFromMG = ')
print(qlmFromMG)
print('std, stm = MAPMAP1(D0, D1, S0, S1, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5):')
std, stm = MAPMAP1(D0, D1, S0, S1, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
print('std = ')
print(std)
print('stm = ')
print(stm)
print('betap, Bp = MAPMAP1(D0, D1, S0, S1, "stDistrPH"):')
betap, Bp = MAPMAP1(D0, D1, S0, S1, "stDistrPH")
print('betap = ')
print(betap)
print('Bp = ')
print(Bp)
print('beta, B = MAPMAP1(D0, D1, S0, S1, "stDistrME"):')
beta, B = MAPMAP1(D0, D1, S0, S1, "stDistrME")
print('beta = ')
print(beta)
print('B = ')
print(B)
print('stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1)):')
stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
print('stdFromPH = ')
print(stdFromPH)
print('stmFromME = MomentsFromME(beta, B, 5):')
stmFromME = MomentsFromME(beta, B, 5)
print('stmFromME = ')
print(stmFromME)
assert CheckMGRepresentation(alpha, A), "MAPMAP1: invalid MG representation of the queue length!"
assert CheckMERepresentation(beta, B), "MAPMAP1: invalid ME representation of the sojourn time!"
assert CheckDPHRepresentation(alphap, Ap), "MAPMAP1: invalid DPH representation of the queue length!"
assert CheckPHRepresentation(betap, Bp), "MAPMAP1: invalid PH representation of the sojourn time!"
assert np.abs(qlm[0]-stm[0]*lambd)<10**12, "MAPMAP1: Little formula does not hold!"
assert la.norm((np.array(MomentsFromDPH(alphap, Ap, 5))-np.array(qlmFromMG))/np.array(qlmFromMG))<10**12, "MAPMAP1: the MG and DPH representations are not equal!"
assert la.norm((np.array(MomentsFromPH(betap, Bp, 5))-np.array(stmFromME))/np.array(stmFromME))<10**12, "MAPMAP1: the ME and PH representations are not equal!"
assert la.norm(qld-PmfFromMG(alpha, A, np.arange(0,11.0,1)))<10**12, "MAPMAP1: qlDistr returns wrong queue length distribution!"
assert la.norm(std-CdfFromME(beta, B, np.arange(0.,1.1,0.1)))<10**12, "MAPMAP1: stDistr returns wrong sojourn time distribution!"
assert la.norm((np.array(qlm)-np.array(qlmFromMG))/np.array(qlm))<10**12, "MAPMAP1: qlMoms returns wrong queue length moments!"
assert la.norm((np.array(stm)-np.array(stmFromME))/np.array(stm))<10**12, "MAPMAP1: stMoms returns wrong sojourn time moments!"
IA = ml.eye(D0.shape[0])
IS = ml.eye(S0.shape[0])
butools.verbose = False
gamma, G = QBDQueue(ml.kron(IA, S1), ml.kron(D0, IS)+ml.kron(IA, S0), ml.kron(D1, IS), ml.kron(D0, IS), "stDistrME")
butools.verbose = True
msmall = MomentsFromME(beta, B, 5)
mlarge = MomentsFromME(gamma, G, 5)
assert la.norm((np.array(msmall)-np.array(mlarge))/np.array(msmall))<10**12, "MAPMAP1: Large and small model does not give the same results!"
print('Input:')
print('------')
D0 = ml.matrix([[-8., 1., 2.],[0., -6., 4.],[3., 0., -3.]])
print('D0 = ')
print(D0)
D1 = ml.matrix([[4., 1., 0.],[0., 0., 2.],[0., 0., 0.]])
print('D1 = ')
print(D1)
sigma = ml.matrix([[0.2,0.7,0.1]])
print('sigma = ')
print(sigma)
S = ml.matrix([[-10., 4., 0.],[5., -7., 2.],[1., 2., -8.]])
print('S = ')
print(S)
print('S0 = S:')
S0 = S
print('S1 = np.sum(-S,1)*sigma:')
S1 = np.sum(-S,1)*sigma
lambd = 1./MarginalMomentsFromMAP(D0, D1, 1)[0]
print('Test:')
print('-----')
print('qld, qlm = MAPMAP1(D0, D1, S0, S1, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5):')
qld, qlm = MAPMAP1(D0, D1, S0, S1, "qlDistr", np.arange(0,11.0,1), "qlMoms", 5)
print('qld = ')
print(qld)
print('qlm = ')
print(qlm)
print('alphap, Ap = MAPMAP1(D0, D1, S0, S1, "qlDistrDPH"):')
alphap, Ap = MAPMAP1(D0, D1, S0, S1, "qlDistrDPH")
print('alphap = ')
print(alphap)
print('Ap = ')
print(Ap)
print('alpha, A = MAPMAP1(D0, D1, S0, S1, "qlDistrMG"):')
alpha, A = MAPMAP1(D0, D1, S0, S1, "qlDistrMG")
print('alpha = ')
print(alpha)
print('A = ')
print(A)
print('qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1)):')
qldFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1))
print('qldFromDPH = ')
print(qldFromDPH)
print('qlmFromMG = MomentsFromMG(alpha, A, 5):')
qlmFromMG = MomentsFromMG(alpha, A, 5)
print('qlmFromMG = ')
print(qlmFromMG)
print('std, stm = MAPMAP1(D0, D1, S0, S1, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5):')
std, stm = MAPMAP1(D0, D1, S0, S1, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
print('std = ')
print(std)
print('stm = ')
print(stm)
print('betap, Bp = MAPMAP1(D0, D1, S0, S1, "stDistrPH"):')
betap, Bp = MAPMAP1(D0, D1, S0, S1, "stDistrPH")
print('betap = ')
print(betap)
print('Bp = ')
print(Bp)
print('beta, B = MAPMAP1(D0, D1, S0, S1, "stDistrME"):')
beta, B = MAPMAP1(D0, D1, S0, S1, "stDistrME")
print('beta = ')
print(beta)
print('B = ')
print(B)
print('stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1)):')
stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
print('stdFromPH = ')
print(stdFromPH)
print('stmFromME = MomentsFromME(beta, B, 5):')
stmFromME = MomentsFromME(beta, B, 5)
print('stmFromME = ')
print(stmFromME)
assert CheckMGRepresentation(alpha, A), "MAPMAP1: invalid MG representation of the queue length!"
assert CheckMERepresentation(beta, B), "MAPMAP1: invalid ME representation of the sojourn time!"
assert CheckDPHRepresentation(alphap, Ap), "MAPMAP1: invalid DPH representation of the queue length!"
assert CheckPHRepresentation(betap, Bp), "MAPMAP1: invalid PH representation of the sojourn time!"
assert np.abs(qlm[0]-stm[0]*lambd)<10**12, "MAPMAP1: Little formula does not hold!"
assert la.norm((np.array(MomentsFromDPH(alphap, Ap, 5))-np.array(qlmFromMG))/np.array(qlmFromMG))<10**12, "MAPMAP1: the MG and DPH representations are not equal!"
assert la.norm((np.array(MomentsFromPH(betap, Bp, 5))-np.array(stmFromME))/np.array(stmFromME))<10**12, "MAPMAP1: the ME and PH representations are not equal!"
assert la.norm(qld-PmfFromMG(alpha, A, np.arange(0,11.0,1)))<10**12, "MAPMAP1: qlDistr returns wrong queue length distribution!"
assert la.norm(std-CdfFromME(beta, B, np.arange(0.,1.1,0.1)))<10**12, "MAPMAP1: stDistr returns wrong sojourn time distribution!"
assert la.norm((np.array(qlm)-np.array(qlmFromMG))/np.array(qlm))<10**12, "MAPMAP1: qlMoms returns wrong queue length moments!"
assert la.norm((np.array(stm)-np.array(stmFromME))/np.array(stm))<10**12, "MAPMAP1: stMoms returns wrong sojourn time moments!"
IA = ml.eye(D0.shape[0])
IS = ml.eye(S0.shape[0])
butools.verbose = False
gamma, G = QBDQueue(ml.kron(IA, S1), ml.kron(D0, IS)+ml.kron(IA, S0), ml.kron(D1, IS), ml.kron(D0, IS), "stDistrME")
butools.verbose = True
msmall = MomentsFromME(beta, B, 5)
mlarge = MomentsFromME(gamma, G, 5)
assert la.norm((np.array(msmall)-np.array(mlarge))/np.array(msmall))<10**12, "MAPMAP1: Large and small model do not give the same results!"
print('========================================')
print('Testing BuTools function MMAPPH1PRPR')
print('Input:')
print('------')
D0 = ml.matrix([[-5.49, 0., 1.15, 0.],[0., -2.29, 0., 0.],[0., 0.08, -1.32, 0.],[0.72, 1.17, 0.7, -7.07]])
print('D0 = ')
print(D0)
D1 = ml.matrix([[0.25, 0.38, 0.64, 0.],[0., 0., 0., 1.09],[0., 1.24, 0., 0.],[0.37, 0., 0., 0.]])
print('D1 = ')
print(D1)
D2 = ml.matrix([[0.3, 1.0, 0., 0.48],[0., 0.2, 0., 0.],[0., 0., 0., 0.],[0.61, 0., 0., 0.2]])
print('D2 = ')
print(D2)
D3 = ml.matrix([[0., 0.98, 0., 0.31],[0., 0., 1.0, 0.],[0., 0., 0., 0.],[1.1, 0.84, 0.33, 1.03]])
print('D3 = ')
print(D3)
sigma3 = ml.matrix([[0.83333,0.11404,0.05263]])
print('sigma3 = ')
print(sigma3)
S3 = ml.matrix([[-3., 0., 0.],[0.73077, -0.73077, 0.],[0., 0.5, -0.5]])
print('S3 = ')
print(S3)
sigma2 = ml.matrix([[1.]])
print('sigma2 = ')
print(sigma2)
S2 = ml.matrix([[-2.]])
print('S2 = ')
print(S2)
sigma1 = ml.matrix([[0.25,0.75]])
print('sigma1 = ')
print(sigma1)
S1 = ml.matrix([[-2.5, 2.5],[0., -10.]])
print('S1 = ')
print(S1)
print('Test:')
print('-----')
print('qlm, qld = MMAPPH1PRPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "qlMoms", 3, "qlDistr", 500):')
qlm, qld = MMAPPH1PRPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "qlMoms", 3, "qlDistr", 500)
momFromDistr = ml.vstack((ml.matrix(np.arange(0,500.0,1)),ml.matrix(np.arange(0,500.0,1)**2),ml.matrix(np.arange(0,500.0,1)**3)))*qld
assert la.norm((momFromDistr-qlm)/qlm)<0.001, "MMAPPH1PRPR: queue length moments and queue length distribution are not consistent!"
distrPoints = [1., 5., 10.]
print('stm, std = MMAPPH1PRPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "stMoms", 3, "stDistr", distrPoints):')
stm, std = MMAPPH1PRPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "stMoms", 3, "stDistr", distrPoints)
print('stm = ')
print(stm)
print('std = ')
print(std)
assert np.min(std)>=0 and np.max(std)<=1 and np.all(np.diff(std)>=0), "MMAPPH1PRPR: invalid sojourn time distribution!"
lambda1 = 1./MarginalMomentsFromMAP(D0+D2+D3, D1, 1)[0]
lambda2 = 1./MarginalMomentsFromMAP(D0+D1+D3, D2, 1)[0]
lambda3 = 1./MarginalMomentsFromMAP(D0+D1+D2, D3, 1)[0]
assert np.abs(qlm[0, 0]-stm[0, 0]*lambda1)<10**12, "MMAPPH1PRPR: Little formula does not hold for class 1!"
assert np.abs(qlm[0, 1]-stm[0, 1]*lambda2)<10**12, "MMAPPH1PRPR: Little formula does not hold for class 2!"
assert np.abs(qlm[0, 2]-stm[0, 2]*lambda3)<10**12, "MMAPPH1PRPR: Little formula does not hold for class 3!"
print('Input:')
print('------')
D0 = ml.matrix([[-5.49, 0., 1.15, 0.],[0., -2.29, 0., 0.],[0., 0.08, -1.32, 0.],[0.72, 1.17, 0.7, -7.07]])
print('D0 = ')
print(D0)
D1 = ml.matrix([[0.25, 0.38, 0.64, 0.],[0., 0., 0., 1.09],[0., 1.24, 0., 0.],[0.37, 0., 0., 0.]])
print('D1 = ')
print(D1)
D2 = ml.matrix([[0.3, 1.0, 0., 0.48],[0., 0.2, 0., 0.],[0., 0., 0., 0.],[0.61, 0., 0., 0.2]])
print('D2 = ')
print(D2)
D3 = ml.matrix([[0., 0.98, 0., 0.31],[0., 0., 1.0, 0.],[0., 0., 0., 0.],[1.1, 0.84, 0.33, 1.03]])
print('D3 = ')
print(D3)
sigma3 = ml.matrix([[0.16667,0.83333]])
print('sigma3 = ')
print(sigma3)
S3 = ml.matrix([[-0.5, 0.5],[0., -3.]])
print('S3 = ')
print(S3)
sigma2 = ml.matrix([[0.58824,0.41176]])
print('sigma2 = ')
print(sigma2)
S2 = ml.matrix([[-2.3529, 2.3529],[0., -4.]])
print('S2 = ')
print(S2)
sigma1 = ml.matrix([[0.25,0.75]])
print('sigma1 = ')
print(sigma1)
S1 = ml.matrix([[-2.5, 2.5],[0., -10.]])
print('S1 = ')
print(S1)
print('Test:')
print('-----')
print('qlm, qld = MMAPPH1PRPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "qlMoms", 3, "qlDistr", 500):')
qlm, qld = MMAPPH1PRPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "qlMoms", 3, "qlDistr", 500)
momFromDistr = ml.vstack((ml.matrix(np.arange(0,500.0,1)),ml.matrix(np.arange(0,500.0,1)**2),ml.matrix(np.arange(0,500.0,1)**3)))*qld
assert la.norm((momFromDistr-qlm)/qlm)<0.001, "MMAPPH1PRPR: queue length moments and queue length distribution are not consistent!"
distrPoints = [1., 5., 10.]
print('stm, std = MMAPPH1PRPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "stMoms", 3, "stDistr", distrPoints):')
stm, std = MMAPPH1PRPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "stMoms", 3, "stDistr", distrPoints)
print('stm = ')
print(stm)
print('std = ')
print(std)
assert np.min(std)>=0 and np.max(std)<=1 and np.all(np.diff(std)>=0), "MMAPPH1PRPR: invalid sojourn time distribution!"
lambda1 = 1./MarginalMomentsFromMAP(D0+D2+D3, D1, 1)[0]
lambda2 = 1./MarginalMomentsFromMAP(D0+D1+D3, D2, 1)[0]
lambda3 = 1./MarginalMomentsFromMAP(D0+D1+D2, D3, 1)[0]
assert np.abs(qlm[0, 0]-stm[0, 0]*lambda1)<10**12, "MMAPPH1PRPR: Little formula does not hold for class 1!"
assert np.abs(qlm[0, 1]-stm[0, 1]*lambda2)<10**12, "MMAPPH1PRPR: Little formula does not hold for class 2!"
assert np.abs(qlm[0, 2]-stm[0, 2]*lambda3)<10**12, "MMAPPH1PRPR: Little formula does not hold for class 3!"
print('========================================')
print('Testing BuTools function MMAPPH1NPPR')
print('Input:')
print('------')
D0 = ml.matrix([[-5.49, 0., 1.15, 0.],[0., -2.29, 0., 0.],[0., 0.08, -1.32, 0.],[0.72, 1.17, 0.7, -7.07]])
print('D0 = ')
print(D0)
D1 = ml.matrix([[0.25, 0.38, 0.64, 0.],[0., 0., 0., 1.09],[0., 1.24, 0., 0.],[0.37, 0., 0., 0.]])
print('D1 = ')
print(D1)
D2 = ml.matrix([[0.3, 1.0, 0., 0.48],[0., 0.2, 0., 0.],[0., 0., 0., 0.],[0.61, 0., 0., 0.2]])
print('D2 = ')
print(D2)
D3 = ml.matrix([[0., 0.98, 0., 0.31],[0., 0., 1.0, 0.],[0., 0., 0., 0.],[1.1, 0.84, 0.33, 1.03]])
print('D3 = ')
print(D3)
sigma3 = ml.matrix([[0.83333,0.11404,0.05263]])
print('sigma3 = ')
print(sigma3)
S3 = ml.matrix([[-3., 0., 0.],[0.73077, -0.73077, 0.],[0., 0.5, -0.5]])
print('S3 = ')
print(S3)
sigma2 = ml.matrix([[1.]])
print('sigma2 = ')
print(sigma2)
S2 = ml.matrix([[-2.]])
print('S2 = ')
print(S2)
sigma1 = ml.matrix([[0.25,0.75]])
print('sigma1 = ')
print(sigma1)
S1 = ml.matrix([[-2.5, 2.5],[0., -10.]])
print('S1 = ')
print(S1)
print('Test:')
print('-----')
print('qlm, qld = MMAPPH1NPPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "qlMoms", 3, "qlDistr", 500):')
qlm, qld = MMAPPH1NPPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "qlMoms", 3, "qlDistr", 500)
momFromDistr = ml.vstack((ml.matrix(np.arange(0,500.0,1)),ml.matrix(np.arange(0,500.0,1)**2),ml.matrix(np.arange(0,500.0,1)**3)))*qld
assert la.norm((momFromDistr-qlm)/qlm)<0.001, "MMAPPH1NPPR: queue length moments and queue length distribution are not consistent!"
distrPoints = [1., 5., 10.]
print('stm, std = MMAPPH1NPPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "stMoms", 3, "stDistr", distrPoints):')
stm, std = MMAPPH1NPPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "stMoms", 3, "stDistr", distrPoints)
print('stm = ')
print(stm)
print('std = ')
print(std)
assert np.min(std)>=0 and np.max(std)<=1 and np.all(np.diff(std)>=0), "MMAPPH1NPPR: invalid sojourn time distribution!"
lambda1 = 1./MarginalMomentsFromMAP(D0+D2+D3, D1, 1)[0]
lambda2 = 1./MarginalMomentsFromMAP(D0+D1+D3, D2, 1)[0]
lambda3 = 1./MarginalMomentsFromMAP(D0+D1+D2, D3, 1)[0]
assert np.abs(qlm[0, 0]-stm[0, 0]*lambda1)<10**12, "MMAPPH1NPPR: Little formula does not hold for class 1!"
assert np.abs(qlm[0, 1]-stm[0, 1]*lambda2)<10**12, "MMAPPH1NPPR: Little formula does not hold for class 2!"
assert np.abs(qlm[0, 2]-stm[0, 2]*lambda3)<10**12, "MMAPPH1NPPR: Little formula does not hold for class 3!"
print('Input:')
print('------')
D0 = ml.matrix([[-5.49, 0., 1.15, 0.],[0., -2.29, 0., 0.],[0., 0.08, -1.32, 0.],[0.72, 1.17, 0.7, -7.07]])
print('D0 = ')
print(D0)
D1 = ml.matrix([[0.25, 0.38, 0.64, 0.],[0., 0., 0., 1.09],[0., 1.24, 0., 0.],[0.37, 0., 0., 0.]])
print('D1 = ')
print(D1)
D2 = ml.matrix([[0.3, 1.0, 0., 0.48],[0., 0.2, 0., 0.],[0., 0., 0., 0.],[0.61, 0., 0., 0.2]])
print('D2 = ')
print(D2)
D3 = ml.matrix([[0., 0.98, 0., 0.31],[0., 0., 1.0, 0.],[0., 0., 0., 0.],[1.1, 0.84, 0.33, 1.03]])
print('D3 = ')
print(D3)
sigma3 = ml.matrix([[0.16667,0.83333]])
print('sigma3 = ')
print(sigma3)
S3 = ml.matrix([[-0.5, 0.5],[0., -3.]])
print('S3 = ')
print(S3)
sigma2 = ml.matrix([[0.58824,0.41176]])
print('sigma2 = ')
print(sigma2)
S2 = ml.matrix([[-2.3529, 2.3529],[0., -4.]])
print('S2 = ')
print(S2)
sigma1 = ml.matrix([[0.25,0.75]])
print('sigma1 = ')
print(sigma1)
S1 = ml.matrix([[-2.5, 2.5],[0., -10.]])
print('S1 = ')
print(S1)
print('Test:')
print('-----')
print('qlm, qld = MMAPPH1NPPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "qlMoms", 3, "qlDistr", 500):')
qlm, qld = MMAPPH1NPPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "qlMoms", 3, "qlDistr", 500)
momFromDistr = ml.vstack((ml.matrix(np.arange(0,500.0,1)),ml.matrix(np.arange(0,500.0,1)**2),ml.matrix(np.arange(0,500.0,1)**3)))*qld
assert la.norm((momFromDistr-qlm)/qlm)<0.001, "MMAPPH1NPPR: queue length moments and queue length distribution are not consistent!"
distrPoints = [1., 5., 10.]
print('stm, std = MMAPPH1NPPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "stMoms", 3, "stDistr", distrPoints):')
stm, std = MMAPPH1NPPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "stMoms", 3, "stDistr", distrPoints)
print('stm = ')
print(stm)
print('std = ')
print(std)
assert np.min(std)>=0 and np.max(std)<=1 and np.all(np.diff(std)>=0), "MMAPPH1NPPR: invalid sojourn time distribution!"
lambda1 = 1./MarginalMomentsFromMAP(D0+D2+D3, D1, 1)[0]
lambda2 = 1./MarginalMomentsFromMAP(D0+D1+D3, D2, 1)[0]
lambda3 = 1./MarginalMomentsFromMAP(D0+D1+D2, D3, 1)[0]
assert np.abs(qlm[0, 0]-stm[0, 0]*lambda1)<10**12, "MMAPPH1NPPR: Little formula does not hold for class 1!"
assert np.abs(qlm[0, 1]-stm[0, 1]*lambda2)<10**12, "MMAPPH1NPPR: Little formula does not hold for class 2!"
assert np.abs(qlm[0, 2]-stm[0, 2]*lambda3)<10**12, "MMAPPH1NPPR: Little formula does not hold for class 3!"
print('========================================')
print('Testing BuTools function FluidQueue')
print('Input:')
print('------')
Q = ml.matrix([[-9., 2., 4., 0., 1., 2.],[6., -25., 5., 3., 7., 4.],[1., 3., -4., 0., 0., 0.],[0., 0., 0., -8., 3., 5.],[7., 3., 0., 2., -13., 1.],[7., 8., 0., 3., 8., -26.]])
print('Q = ')
print(Q)
vRin = ml.matrix([[4.,2.,1.,0.,0.,3.]])
print('vRin = ')
print(vRin)
vRout = ml.matrix([[6.,2.,0.,0.,3.,2.]])
print('vRout = ')
print(vRout)
print('Rin = Diag(vRin):')
Rin = Diag(vRin)
print('Rout = Diag(vRout):')
Rout = Diag(vRout)
lambd = np.sum(CTMCSolve(Q)*Rin)
print('Test:')
print('-----')
print('qld, qlm = FluidQueue(Q, Rin, Rout, "qlDistr", np.arange(0.,1.1,0.1), "qlMoms", 5):')
qld, qlm = FluidQueue(Q, Rin, Rout, "qlDistr", np.arange(0.,1.1,0.1), "qlMoms", 5)
print('qld = ')
print(qld)
print('qlm = ')
print(qlm)
print('alphap, Ap = FluidQueue(Q, Rin, Rout, "qlDistrPH"):')
alphap, Ap = FluidQueue(Q, Rin, Rout, "qlDistrPH")
print('alphap = ')
print(alphap)
print('Ap = ')
print(Ap)
print('alpha, A = FluidQueue(Q, Rin, Rout, "qlDistrME"):')
alpha, A = FluidQueue(Q, Rin, Rout, "qlDistrME")
print('alpha = ')
print(alpha)
print('A = ')
print(A)
print('qldFromPH = CdfFromPH(alphap, Ap, np.arange(0.,1.1,0.1)):')
qldFromPH = CdfFromPH(alphap, Ap, np.arange(0.,1.1,0.1))
print('qldFromPH = ')
print(qldFromPH)
print('qlmFromME = MomentsFromME(alpha, A, 5):')
qlmFromME = MomentsFromME(alpha, A, 5)
print('qlmFromME = ')
print(qlmFromME)
print('std, stm = FluidQueue(Q, Rin, Rout, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5):')
std, stm = FluidQueue(Q, Rin, Rout, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
print('std = ')
print(std)
print('stm = ')
print(stm)
print('betap, Bp = FluidQueue(Q, Rin, Rout, "stDistrPH"):')
betap, Bp = FluidQueue(Q, Rin, Rout, "stDistrPH")
print('betap = ')
print(betap)
print('Bp = ')
print(Bp)
print('beta, B = FluidQueue(Q, Rin, Rout, "stDistrME"):')
beta, B = FluidQueue(Q, Rin, Rout, "stDistrME")
print('beta = ')
print(beta)
print('B = ')
print(B)
print('stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1)):')
stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
print('stdFromPH = ')
print(stdFromPH)
print('stmFromME = MomentsFromME(beta, B, 5):')
stmFromME = MomentsFromME(beta, B, 5)
print('stmFromME = ')
print(stmFromME)
assert CheckMERepresentation(alpha, A), "FluidQueue: invalid ME representation of the queue length!"
assert CheckMERepresentation(beta, B), "FluidQueue: invalid ME representation of the sojourn time!"
assert CheckPHRepresentation(alphap, Ap), "FluidQueue: invalid PH representation of the queue length!"
assert CheckPHRepresentation(betap, Bp), "FluidQueue: invalid PH representation of the sojourn time!"
assert np.abs(qlm[0]-stm[0]*lambd)<10**12, "FluidQueue: Little formula does not hold!"
assert la.norm((np.array(MomentsFromPH(alphap, Ap, 5))-np.array(qlmFromME))/np.array(qlmFromME))<10**12, "FluidQueue: the ME and PH representations are not equal!"
assert la.norm((np.array(MomentsFromPH(betap, Bp, 5))-np.array(stmFromME))/np.array(stmFromME))<10**12, "FluidQueue: the ME and PH representations are not equal!"
assert la.norm(qld-CdfFromME(alpha, A, np.arange(0.,1.1,0.1)))<10**12, "FluidQueue: qlDistr returns wrong queue length distribution!"
assert la.norm(std-CdfFromME(beta, B, np.arange(0.,1.1,0.1)))<10**12, "FluidQueue: stDistr returns wrong sojourn time distribution!"
assert la.norm((np.array(qlm)-np.array(qlmFromME))/np.array(qlm))<10**12, "FluidQueue: qlMoms returns wrong queue length moments!"
assert la.norm((np.array(stm)-np.array(stmFromME))/np.array(stm))<10**12, "FluidQueue: stMoms returns wrong sojourn time moments!"
print('========================================')
print('Testing BuTools function FluFluQueue')
print('Input:')
print('------')
Qin = ml.matrix([[-2., 1., 1.],[2., -5., 3.],[4., 0., -4.]])
print('Qin = ')
print(Qin)
vRin = ml.matrix([[3.,7.,0.]])
print('vRin = ')
print(vRin)
print('Rin = Diag(vRin):')
Rin = Diag(vRin)
Qout = ml.matrix([[-4., 1., 3.],[6., -8., 2.],[3., 7., -10.]])
print('Qout = ')
print(Qout)
vRout = ml.matrix([[1.,7.,15.]])
print('vRout = ')
print(vRout)
print('Rout = Diag(vRout):')
Rout = Diag(vRout)
lambd = np.sum(CTMCSolve(Qin)*Rin)
print('Test:')
print('-----')
print('qld, qlm = FluFluQueue(Qin, Rin, Qout, Rout, False, "qlDistr", np.arange(0.,1.1,0.1), "qlMoms", 5):')
qld, qlm = FluFluQueue(Qin, Rin, Qout, Rout, False, "qlDistr", np.arange(0.,1.1,0.1), "qlMoms", 5)
print('qld = ')
print(qld)
print('qlm = ')
print(qlm)
print('alphap, Ap = FluFluQueue(Qin, Rin, Qout, Rout, False, "qlDistrPH"):')
alphap, Ap = FluFluQueue(Qin, Rin, Qout, Rout, False, "qlDistrPH")
print('alphap = ')
print(alphap)
print('Ap = ')
print(Ap)
print('alpha, A = FluFluQueue(Qin, Rin, Qout, Rout, False, "qlDistrME"):')
alpha, A = FluFluQueue(Qin, Rin, Qout, Rout, False, "qlDistrME")
print('alpha = ')
print(alpha)
print('A = ')
print(A)
print('qldFromPH = CdfFromPH(alphap, Ap, np.arange(0.,1.1,0.1)):')
qldFromPH = CdfFromPH(alphap, Ap, np.arange(0.,1.1,0.1))
print('qldFromPH = ')
print(qldFromPH)
print('qlmFromME = MomentsFromME(alpha, A, 5):')
qlmFromME = MomentsFromME(alpha, A, 5)
print('qlmFromME = ')
print(qlmFromME)
print('std, stm = FluFluQueue(Qin, Rin, Qout, Rout, False, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5):')
std, stm = FluFluQueue(Qin, Rin, Qout, Rout, False, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
print('std = ')
print(std)
print('stm = ')
print(stm)
print('betap, Bp = FluFluQueue(Qin, Rin, Qout, Rout, False, "stDistrPH"):')
betap, Bp = FluFluQueue(Qin, Rin, Qout, Rout, False, "stDistrPH")
print('betap = ')
print(betap)
print('Bp = ')
print(Bp)
print('beta, B = FluFluQueue(Qin, Rin, Qout, Rout, False, "stDistrME"):')
beta, B = FluFluQueue(Qin, Rin, Qout, Rout, False, "stDistrME")
print('beta = ')
print(beta)
print('B = ')
print(B)
print('stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1)):')
stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
print('stdFromPH = ')
print(stdFromPH)
print('stmFromME = MomentsFromME(beta, B, 5):')
stmFromME = MomentsFromME(beta, B, 5)
print('stmFromME = ')
print(stmFromME)
assert CheckMERepresentation(alpha, A), "FluFluQueue: invalid ME representation of the queue length!"
assert CheckMERepresentation(beta, B), "FluFluQueue: invalid ME representation of the sojourn time!"
assert CheckPHRepresentation(alphap, Ap), "FluFluQueue: invalid PH representation of the queue length!"
assert CheckPHRepresentation(betap, Bp), "FluFluQueue: invalid PH representation of the sojourn time!"
assert np.abs(qlm[0]-stm[0]*lambd)<10**12, "FluFluQueue: Little formula does not hold!"
assert la.norm((np.array(MomentsFromPH(alphap, Ap, 5))-np.array(qlmFromME))/np.array(qlmFromME))<10**12, "FluFluQueue: the ME and PH representations are not equal!"
assert la.norm((np.array(MomentsFromPH(betap, Bp, 5))-np.array(stmFromME))/np.array(stmFromME))<10**12, "FluFluQueue: the ME and PH representations are not equal!"
assert la.norm(qld-CdfFromME(alpha, A, np.arange(0.,1.1,0.1)))<10**12, "FluFluQueue: qlDistr returns wrong queue length distribution!"
assert la.norm(std-CdfFromME(beta, B, np.arange(0.,1.1,0.1)))<10**12, "FluFluQueue: stDistr returns wrong sojourn time distribution!"
assert la.norm((np.array(qlm)-np.array(qlmFromME))/np.array(qlm))<10**12, "FluFluQueue: qlMoms returns wrong queue length moments!"
assert la.norm((np.array(stm)-np.array(stmFromME))/np.array(stm))<10**12, "FluFluQueue: stMoms returns wrong sojourn time moments!"
Iin = ml.eye(Qin.shape[0])
Iout = ml.eye(Qout.shape[0])
butools.verbose = False
gamma, G = FluidQueue(ml.kron(Qin, Iout)+ml.kron(Iin, Qout), ml.kron(Rin, Iout), ml.kron(Iin, Rout), "stDistrME")
butools.verbose = True
msmall = MomentsFromME(beta, B, 5)
mlarge = MomentsFromME(gamma, G, 5)
assert la.norm((np.array(msmall)-np.array(mlarge))/np.array(msmall))<10**12, "FluFluQueue: Large and small model do not give the same results!"
print('Test:')
print('-----')
print('qld, qlm = FluFluQueue(Qin, Rin, Qout, Rout, True, "qlDistr", np.arange(0.,1.1,0.1), "qlMoms", 5):')
qld, qlm = FluFluQueue(Qin, Rin, Qout, Rout, True, "qlDistr", np.arange(0.,1.1,0.1), "qlMoms", 5)
print('qld = ')
print(qld)
print('qlm = ')
print(qlm)
print('alphap, Ap = FluFluQueue(Qin, Rin, Qout, Rout, True, "qlDistrPH"):')
alphap, Ap = FluFluQueue(Qin, Rin, Qout, Rout, True, "qlDistrPH")
print('alphap = ')
print(alphap)
print('Ap = ')
print(Ap)
print('alpha, A = FluFluQueue(Qin, Rin, Qout, Rout, True, "qlDistrME"):')
alpha, A = FluFluQueue(Qin, Rin, Qout, Rout, True, "qlDistrME")
print('alpha = ')
print(alpha)
print('A = ')
print(A)
print('qldFromPH = CdfFromPH(alphap, Ap, np.arange(0.,1.1,0.1)):')
qldFromPH = CdfFromPH(alphap, Ap, np.arange(0.,1.1,0.1))
print('qldFromPH = ')
print(qldFromPH)
print('qlmFromME = MomentsFromME(alpha, A, 5):')
qlmFromME = MomentsFromME(alpha, A, 5)
print('qlmFromME = ')
print(qlmFromME)
print('std, stm = FluFluQueue(Qin, Rin, Qout, Rout, True, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5):')
std, stm = FluFluQueue(Qin, Rin, Qout, Rout, True, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
print('std = ')
print(std)
print('stm = ')
print(stm)
print('betap, Bp = FluFluQueue(Qin, Rin, Qout, Rout, True, "stDistrPH"):')
betap, Bp = FluFluQueue(Qin, Rin, Qout, Rout, True, "stDistrPH")
print('betap = ')
print(betap)
print('Bp = ')
print(Bp)
print('beta, B = FluFluQueue(Qin, Rin, Qout, Rout, True, "stDistrME"):')
beta, B = FluFluQueue(Qin, Rin, Qout, Rout, True, "stDistrME")
print('beta = ')
print(beta)
print('B = ')
print(B)
print('stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1)):')
stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
print('stdFromPH = ')
print(stdFromPH)
print('stmFromME = MomentsFromME(beta, B, 5):')
stmFromME = MomentsFromME(beta, B, 5)
print('stmFromME = ')
print(stmFromME)
assert CheckMERepresentation(alpha, A), "FluFluQueue: invalid ME representation of the queue length!"
assert CheckMERepresentation(beta, B), "FluFluQueue: invalid ME representation of the sojourn time!"
assert CheckPHRepresentation(alphap, Ap), "FluFluQueue: invalid PH representation of the queue length!"
assert CheckPHRepresentation(betap, Bp), "FluFluQueue: invalid PH representation of the sojourn time!"
assert np.abs(qlm[0]-stm[0]*lambd)<10**12, "FluFluQueue: Little formula does not hold!"
assert la.norm((np.array(MomentsFromPH(alphap, Ap, 5))-np.array(qlmFromME))/np.array(qlmFromME))<10**12, "FluFluQueue: the ME and PH representations are not equal!"
assert la.norm((np.array(MomentsFromPH(betap, Bp, 5))-np.array(stmFromME))/np.array(stmFromME))<10**12, "FluFluQueue: the ME and PH representations are not equal!"
assert la.norm(qld-CdfFromME(alpha, A, np.arange(0.,1.1,0.1)))<10**12, "FluFluQueue: qlDistr returns wrong queue length distribution!"
assert la.norm(std-CdfFromME(beta, B, np.arange(0.,1.1,0.1)))<10**12, "FluFluQueue: stDistr returns wrong sojourn time distribution!"
assert la.norm((np.array(qlm)-np.array(qlmFromME))/np.array(qlm))<10**12, "FluFluQueue: qlMoms returns wrong queue length moments!"
assert la.norm((np.array(stm)-np.array(stmFromME))/np.array(stm))<10**12, "FluFluQueue: stMoms returns wrong sojourn time moments!"
Iin = ml.eye(Qin.shape[0])
Iout = ml.eye(Qout.shape[0])
butools.verbose = False
gamma, G = FluidQueue(ml.kron(Qin, Iout)+ml.kron(Iin, Qout), ml.kron(Rin, Iout), ml.kron(Iin, Rout), "Q0", ml.kron(Qin, Iout)+ml.kron(Rin, la.pinv(Rout)*Qout), "stDistrME")
butools.verbose = True
msmall = MomentsFromME(beta, B, 5)
mlarge = MomentsFromME(gamma, G, 5)
assert la.norm((np.array(msmall)-np.array(mlarge))/np.array(msmall))<10**12, "FluFluQueue: Large and small model do not give the same results!"

