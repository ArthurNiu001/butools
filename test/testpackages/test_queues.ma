ClearAll["Global`*"]
AppendTo[$Path,"/home/gabor/github/butools/Mathematica"];
<<BuTools`
Print["---BuTools: Queues package test file---"//OutputForm];
Print["Enable the verbose messages with the BuToolsVerbose flag"//OutputForm];
BuTools`Verbose = True;
Print["Enable input parameter checking with the BuToolsCheckInput flag"//OutputForm];
BuTools`CheckInput = true;
On[Assert];
Print["========================================"]
Print["Testing BuTools function QBDQueue"]
Print["Input:"//OutputForm];
Print["------"//OutputForm];
B = {{6., 1., 0.},{0., 4., 1.},{2., 0., 0.}};
Print["B = "//OutputForm];
Print[B];
F = {{0., 1., 1.},{5., 0., 0.},{1., 3., 0.}};
Print["F = "//OutputForm];
Print[F];
L = {{-14., 3., 2.},{0., -14., 4.},{3., 1., -10.}};
Print["L = "//OutputForm];
Print[L];
L0 = L+B;
Print["L0 = "//OutputForm];
Print[L0];
BuTools`Verbose = False;
{pi0, R} = QBDSolve[B, L, F, L0];
lambd = Total[pi0.Inverse[IdentityMatrix[Dimensions[R][[1]]]-R].F];
BuTools`Verbose = True;
Print["Test:"//OutputForm];
Print["-----"//OutputForm];
Print["{qld, qlm} = QBDQueue[B, L, F, L0, \"qlDistr\", Range[0,10,1], \"qlMoms\", 5];:"//OutputForm];
{qld, qlm} = QBDQueue[B, L, F, L0, "qlDistr", Range[0,10,1], "qlMoms", 5];
Print["qld = "//OutputForm];
Print[qld];
Print["qlm = "//OutputForm];
Print[qlm];
Print["{alphap, Ap} = QBDQueue[B, L, F, L0, \"qlDistrDPH\"];:"//OutputForm];
{alphap, Ap} = QBDQueue[B, L, F, L0, "qlDistrDPH"];
Print["alphap = "//OutputForm];
Print[alphap];
Print["Ap = "//OutputForm];
Print[Ap];
Print["{alpha, A} = QBDQueue[B, L, F, L0, \"qlDistrMG\"];:"//OutputForm];
{alpha, A} = QBDQueue[B, L, F, L0, "qlDistrMG"];
Print["alpha = "//OutputForm];
Print[alpha];
Print["A = "//OutputForm];
Print[A];
Print["qldFromDPH = PmfFromDPH[alphap, Ap, Range[0,10,1]];:"//OutputForm];
qldFromDPH = PmfFromDPH[alphap, Ap, Range[0,10,1]];
Print["qldFromDPH = "//OutputForm];
Print[qldFromDPH];
Print["qlmFromMG = MomentsFromMG[alpha, A, 5];:"//OutputForm];
qlmFromMG = MomentsFromMG[alpha, A, 5];
Print["qlmFromMG = "//OutputForm];
Print[qlmFromMG];
Print["{std, stm} = QBDQueue[B, L, F, L0, \"stDistr\", Range[0.,1.,0.1], \"stMoms\", 5];:"//OutputForm];
{std, stm} = QBDQueue[B, L, F, L0, "stDistr", Range[0.,1.,0.1], "stMoms", 5];
Print["std = "//OutputForm];
Print[std];
Print["stm = "//OutputForm];
Print[stm];
Print["{betap, Bp} = QBDQueue[B, L, F, L0, \"stDistrPH\"];:"//OutputForm];
{betap, Bp} = QBDQueue[B, L, F, L0, "stDistrPH"];
Print["betap = "//OutputForm];
Print[betap];
Print["Bp = "//OutputForm];
Print[Bp];
Print["{beta, B} = QBDQueue[B, L, F, L0, \"stDistrME\"];:"//OutputForm];
{beta, B} = QBDQueue[B, L, F, L0, "stDistrME"];
Print["beta = "//OutputForm];
Print[beta];
Print["B = "//OutputForm];
Print[B];
Print["stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];:"//OutputForm];
stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];
Print["stdFromPH = "//OutputForm];
Print[stdFromPH];
Print["stmFromME = MomentsFromME[beta, B, 5];:"//OutputForm];
stmFromME = MomentsFromME[beta, B, 5];
Print["stmFromME = "//OutputForm];
Print[stmFromME];
Assert[CheckMGRepresentation[alpha, A], "QBDQueue: invalid MG representation of the queue length!"];
Assert[CheckMERepresentation[beta, B], "QBDQueue: invalid ME representation of the sojourn time!"];
Assert[CheckDPHRepresentation[alphap, Ap], "QBDQueue: invalid DPH representation of the queue length!"];
Assert[CheckPHRepresentation[betap, Bp], "QBDQueue: invalid PH representation of the sojourn time!"];
Assert[Abs[qlm[[1]]-stm[[1]]*lambd]<10^-12, "QBDQueue: Little formula does not hold!"];
Assert[Norm[(MomentsFromDPH[alphap, Ap, 5]-qlmFromMG)/qlmFromMG]<10^-12, "QBDQueue: the MG and DPH representations are not equal!"];
Assert[Norm[(MomentsFromPH[betap, Bp, 5]-stmFromME)/stmFromME]<10^-12, "QBDQueue: the ME and PH representations are not equal!"];
Assert[Norm[qld-PmfFromMG[alpha, A, Range[0,10,1]]]<10^-12, "QBDQueue: qlDistr returns wrong queue length distribution!"];
Assert[Norm[std-CdfFromME[beta, B, Range[0.,1.,0.1]]]<10^-12, "QBDQueue: stDistr returns wrong sojourn time distribution!"];
Assert[Norm[(qlm-qlmFromMG)/qlm]<10^-12, "QBDQueue: qlMoms returns wrong queue length moments!"];
Assert[Norm[(stm-stmFromME)/stm]<10^-12, "QBDQueue: stMoms returns wrong sojourn time moments!"];
Print["Input:"//OutputForm];
Print["------"//OutputForm];
B = {{6., 1., 0.},{0., 4., 1.},{2., 0., 0.}};
Print["B = "//OutputForm];
Print[B];
F = {{0., 0., 0.},{5., 0., 0.},{1., 3., 0.}};
Print["F = "//OutputForm];
Print[F];
L = {{-12., 3., 2.},{0., -14., 4.},{3., 1., -10.}};
Print["L = "//OutputForm];
Print[L];
L0 = L+B;
Print["L0 = "//OutputForm];
Print[L0];
BuTools`Verbose = False;
{pi0, R} = QBDSolve[B, L, F, L0];
lambd = Total[pi0.Inverse[IdentityMatrix[Dimensions[R][[1]]]-R].F];
BuTools`Verbose = True;
Print["Test:"//OutputForm];
Print["-----"//OutputForm];
Print["{qld, qlm} = QBDQueue[B, L, F, L0, \"qlDistr\", Range[0,10,1], \"qlMoms\", 5];:"//OutputForm];
{qld, qlm} = QBDQueue[B, L, F, L0, "qlDistr", Range[0,10,1], "qlMoms", 5];
Print["qld = "//OutputForm];
Print[qld];
Print["qlm = "//OutputForm];
Print[qlm];
Print["{alphap, Ap} = QBDQueue[B, L, F, L0, \"qlDistrDPH\"];:"//OutputForm];
{alphap, Ap} = QBDQueue[B, L, F, L0, "qlDistrDPH"];
Print["alphap = "//OutputForm];
Print[alphap];
Print["Ap = "//OutputForm];
Print[Ap];
Print["{alpha, A} = QBDQueue[B, L, F, L0, \"qlDistrMG\"];:"//OutputForm];
{alpha, A} = QBDQueue[B, L, F, L0, "qlDistrMG"];
Print["alpha = "//OutputForm];
Print[alpha];
Print["A = "//OutputForm];
Print[A];
Print["qldFromDPH = PmfFromDPH[alphap, Ap, Range[0,10,1]];:"//OutputForm];
qldFromDPH = PmfFromDPH[alphap, Ap, Range[0,10,1]];
Print["qldFromDPH = "//OutputForm];
Print[qldFromDPH];
Print["qlmFromMG = MomentsFromMG[alpha, A, 5];:"//OutputForm];
qlmFromMG = MomentsFromMG[alpha, A, 5];
Print["qlmFromMG = "//OutputForm];
Print[qlmFromMG];
Print["{std, stm} = QBDQueue[B, L, F, L0, \"stDistr\", Range[0.,1.,0.1], \"stMoms\", 5];:"//OutputForm];
{std, stm} = QBDQueue[B, L, F, L0, "stDistr", Range[0.,1.,0.1], "stMoms", 5];
Print["std = "//OutputForm];
Print[std];
Print["stm = "//OutputForm];
Print[stm];
Print["{betap, Bp} = QBDQueue[B, L, F, L0, \"stDistrPH\"];:"//OutputForm];
{betap, Bp} = QBDQueue[B, L, F, L0, "stDistrPH"];
Print["betap = "//OutputForm];
Print[betap];
Print["Bp = "//OutputForm];
Print[Bp];
Print["{beta, B} = QBDQueue[B, L, F, L0, \"stDistrME\"];:"//OutputForm];
{beta, B} = QBDQueue[B, L, F, L0, "stDistrME"];
Print["beta = "//OutputForm];
Print[beta];
Print["B = "//OutputForm];
Print[B];
Print["stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];:"//OutputForm];
stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];
Print["stdFromPH = "//OutputForm];
Print[stdFromPH];
Print["stmFromME = MomentsFromME[beta, B, 5];:"//OutputForm];
stmFromME = MomentsFromME[beta, B, 5];
Print["stmFromME = "//OutputForm];
Print[stmFromME];
Assert[CheckMGRepresentation[alpha, A], "QBDQueue: invalid MG representation of the queue length!"];
Assert[CheckMERepresentation[beta, B], "QBDQueue: invalid ME representation of the sojourn time!"];
Assert[CheckDPHRepresentation[alphap, Ap], "QBDQueue: invalid DPH representation of the queue length!"];
Assert[CheckPHRepresentation[betap, Bp], "QBDQueue: invalid PH representation of the sojourn time!"];
Assert[Abs[qlm[[1]]-stm[[1]]*lambd]<10^-12, "QBDQueue: Little formula does not hold!"];
Assert[Norm[(MomentsFromDPH[alphap, Ap, 5]-qlmFromMG)/qlmFromMG]<10^-12, "QBDQueue: the MG and DPH representations are not equal!"];
Assert[Norm[(MomentsFromPH[betap, Bp, 5]-stmFromME)/stmFromME]<10^-12, "QBDQueue: the ME and PH representations are not equal!"];
Assert[Norm[qld-PmfFromMG[alpha, A, Range[0,10,1]]]<10^12, "QBDQueue: qlDistr returns wrong queue length distribution!"];
Assert[Norm[std-CdfFromME[beta, B, Range[0.,1.,0.1]]]<10^12, "QBDQueue: stDistr returns wrong sojourn time distribution!"];
Assert[Norm[(qlm-qlmFromMG)/qlm]<10^12, "QBDQueue: qlMoms returns wrong queue length moments!"];
Assert[Norm[(stm-stmFromME)/stm]<10^12, "QBDQueue: stMoms returns wrong sojourn time moments!"];
Print["Input:"//OutputForm];
Print["------"//OutputForm];
B = {{6., 1., 0.},{0., 5., 0.},{0., 0., 0.}};
Print["B = "//OutputForm];
Print[B];
F = {{0., 3., 1.},{0., 5., 0.},{0., 0., 0.}};
Print["F = "//OutputForm];
Print[F];
L = {{-16., 3., 2.},{0., -14., 4.},{3., 1., -4.}};
Print["L = "//OutputForm];
Print[L];
L0 = {{-14., 10., 0.},{5., -10., 0.},{3., 1., -4.}};
Print["L0 = "//OutputForm];
Print[L0];
BuTools`Verbose = False;
{pi0, R} = QBDSolve[B, L, F, L0];
lambd = Total[pi0.Inverse[IdentityMatrix[Dimensions[R][[1]]]-R].F];
BuTools`Verbose = True;
Print["Test:"//OutputForm];
Print["-----"//OutputForm];
Print["{qld, qlm} = QBDQueue[B, L, F, L0, \"qlDistr\", Range[0,10,1], \"qlMoms\", 5];:"//OutputForm];
{qld, qlm} = QBDQueue[B, L, F, L0, "qlDistr", Range[0,10,1], "qlMoms", 5];
Print["qld = "//OutputForm];
Print[qld];
Print["qlm = "//OutputForm];
Print[qlm];
Print["{alphap, Ap} = QBDQueue[B, L, F, L0, \"qlDistrDPH\"];:"//OutputForm];
{alphap, Ap} = QBDQueue[B, L, F, L0, "qlDistrDPH"];
Print["alphap = "//OutputForm];
Print[alphap];
Print["Ap = "//OutputForm];
Print[Ap];
Print["{alpha, A} = QBDQueue[B, L, F, L0, \"qlDistrMG\"];:"//OutputForm];
{alpha, A} = QBDQueue[B, L, F, L0, "qlDistrMG"];
Print["alpha = "//OutputForm];
Print[alpha];
Print["A = "//OutputForm];
Print[A];
Print["qldFromDPH = PmfFromDPH[alphap, Ap, Range[0,10,1]];:"//OutputForm];
qldFromDPH = PmfFromDPH[alphap, Ap, Range[0,10,1]];
Print["qldFromDPH = "//OutputForm];
Print[qldFromDPH];
Print["qlmFromMG = MomentsFromMG[alpha, A, 5];:"//OutputForm];
qlmFromMG = MomentsFromMG[alpha, A, 5];
Print["qlmFromMG = "//OutputForm];
Print[qlmFromMG];
Print["{std, stm} = QBDQueue[B, L, F, L0, \"stDistr\", Range[0.,1.,0.1], \"stMoms\", 5];:"//OutputForm];
{std, stm} = QBDQueue[B, L, F, L0, "stDistr", Range[0.,1.,0.1], "stMoms", 5];
Print["std = "//OutputForm];
Print[std];
Print["stm = "//OutputForm];
Print[stm];
Print["{betap, Bp} = QBDQueue[B, L, F, L0, \"stDistrPH\"];:"//OutputForm];
{betap, Bp} = QBDQueue[B, L, F, L0, "stDistrPH"];
Print["betap = "//OutputForm];
Print[betap];
Print["Bp = "//OutputForm];
Print[Bp];
Print["{beta, B} = QBDQueue[B, L, F, L0, \"stDistrME\"];:"//OutputForm];
{beta, B} = QBDQueue[B, L, F, L0, "stDistrME"];
Print["beta = "//OutputForm];
Print[beta];
Print["B = "//OutputForm];
Print[B];
Print["stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];:"//OutputForm];
stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];
Print["stdFromPH = "//OutputForm];
Print[stdFromPH];
Print["stmFromME = MomentsFromME[beta, B, 5];:"//OutputForm];
stmFromME = MomentsFromME[beta, B, 5];
Print["stmFromME = "//OutputForm];
Print[stmFromME];
Assert[CheckMGRepresentation[alpha, A], "QBDQueue: invalid MG representation of the queue length!"];
Assert[CheckMERepresentation[beta, B], "QBDQueue: invalid ME representation of the sojourn time!"];
Assert[CheckDPHRepresentation[alphap, Ap], "QBDQueue: invalid DPH representation of the queue length!"];
Assert[CheckPHRepresentation[betap, Bp], "QBDQueue: invalid PH representation of the sojourn time!"];
Assert[Abs[qlm[[1]]-stm[[1]]*lambd]<10^12, "QBDQueue: Little formula does not hold!"];
Assert[Norm[(MomentsFromDPH[alphap, Ap, 5]-qlmFromMG)/qlmFromMG]<10^12, "QBDQueue: the MG and DPH representations are not equal!"];
Assert[Norm[(MomentsFromPH[betap, Bp, 5]-stmFromME)/stmFromME]<10^12, "QBDQueue: the ME and PH representations are not equal!"];
Assert[Norm[qld-PmfFromMG[alpha, A, Range[0,10,1]]]<10^12, "QBDQueue: qlDistr returns wrong queue length distribution!"];
Assert[Norm[std-CdfFromME[beta, B, Range[0.,1.,0.1]]]<10^12, "QBDQueue: stDistr returns wrong sojourn time distribution!"];
Assert[Norm[(qlm-qlmFromMG)/qlm]<10^12, "QBDQueue: qlMoms returns wrong queue length moments!"];
Assert[Norm[(stm-stmFromME)/stm]<10^12, "QBDQueue: stMoms returns wrong sojourn time moments!"];
Print["Input:"//OutputForm];
Print["------"//OutputForm];
B = {{0., 0.},{3., 4.}};
Print["B = "//OutputForm];
Print[B];
F = {{1., 0.},{2., 0.}};
Print["F = "//OutputForm];
Print[F];
L = {{-6., 5.},{3., -12.}};
Print["L = "//OutputForm];
Print[L];
L0 = {{-6., 5.},{6., -8.}};
Print["L0 = "//OutputForm];
Print[L0];
BuTools`Verbose = False;
{pi0, R} = QBDSolve[B, L, F, L0];
lambd = Total[pi0.Inverse[IdentityMatrix[Dimensions[R][[1]]]-R].F];
BuTools`Verbose = True;
Print["Test:"//OutputForm];
Print["-----"//OutputForm];
Print["{qld, qlm} = QBDQueue[B, L, F, L0, \"qlDistr\", Range[0,10,1], \"qlMoms\", 5];:"//OutputForm];
{qld, qlm} = QBDQueue[B, L, F, L0, "qlDistr", Range[0,10,1], "qlMoms", 5];
Print["qld = "//OutputForm];
Print[qld];
Print["qlm = "//OutputForm];
Print[qlm];
Print["{alphap, Ap} = QBDQueue[B, L, F, L0, \"qlDistrDPH\"];:"//OutputForm];
{alphap, Ap} = QBDQueue[B, L, F, L0, "qlDistrDPH"];
Print["alphap = "//OutputForm];
Print[alphap];
Print["Ap = "//OutputForm];
Print[Ap];
Print["{alpha, A} = QBDQueue[B, L, F, L0, \"qlDistrMG\"];:"//OutputForm];
{alpha, A} = QBDQueue[B, L, F, L0, "qlDistrMG"];
Print["alpha = "//OutputForm];
Print[alpha];
Print["A = "//OutputForm];
Print[A];
Print["qldFromDPH = PmfFromDPH[alphap, Ap, Range[0,10,1]];:"//OutputForm];
qldFromDPH = PmfFromDPH[alphap, Ap, Range[0,10,1]];
Print["qldFromDPH = "//OutputForm];
Print[qldFromDPH];
Print["qlmFromMG = MomentsFromMG[alpha, A, 5];:"//OutputForm];
qlmFromMG = MomentsFromMG[alpha, A, 5];
Print["qlmFromMG = "//OutputForm];
Print[qlmFromMG];
Print["{std, stm} = QBDQueue[B, L, F, L0, \"stDistr\", Range[0.,1.,0.1], \"stMoms\", 5];:"//OutputForm];
{std, stm} = QBDQueue[B, L, F, L0, "stDistr", Range[0.,1.,0.1], "stMoms", 5];
Print["std = "//OutputForm];
Print[std];
Print["stm = "//OutputForm];
Print[stm];
Print["{betap, Bp} = QBDQueue[B, L, F, L0, \"stDistrPH\"];:"//OutputForm];
{betap, Bp} = QBDQueue[B, L, F, L0, "stDistrPH"];
Print["betap = "//OutputForm];
Print[betap];
Print["Bp = "//OutputForm];
Print[Bp];
Print["{beta, B} = QBDQueue[B, L, F, L0, \"stDistrME\"];:"//OutputForm];
{beta, B} = QBDQueue[B, L, F, L0, "stDistrME"];
Print["beta = "//OutputForm];
Print[beta];
Print["B = "//OutputForm];
Print[B];
Print["stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];:"//OutputForm];
stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];
Print["stdFromPH = "//OutputForm];
Print[stdFromPH];
Print["stmFromME = MomentsFromME[beta, B, 5];:"//OutputForm];
stmFromME = MomentsFromME[beta, B, 5];
Print["stmFromME = "//OutputForm];
Print[stmFromME];
Assert[CheckMGRepresentation[alpha, A], "QBDQueue: invalid MG representation of the queue length!"];
Assert[CheckMERepresentation[beta, B], "QBDQueue: invalid ME representation of the sojourn time!"];
Assert[CheckDPHRepresentation[alphap, Ap], "QBDQueue: invalid DPH representation of the queue length!"];
Assert[CheckPHRepresentation[betap, Bp], "QBDQueue: invalid PH representation of the sojourn time!"];
Assert[Abs[qlm[[1]]-stm[[1]]*lambd]<10^12, "QBDQueue: Little formula does not hold!"];
Assert[Norm[(MomentsFromDPH[alphap, Ap, 5]-qlmFromMG)/qlmFromMG]<10^12, "QBDQueue: the MG and DPH representations are not equal!"];
Assert[Norm[(MomentsFromPH[betap, Bp, 5]-stmFromME)/stmFromME]<10^12, "QBDQueue: the ME and PH representations are not equal!"];
Assert[Norm[qld-PmfFromMG[alpha, A, Range[0,10,1]]]<10^12, "QBDQueue: qlDistr returns wrong queue length distribution!"];
Assert[Norm[std-CdfFromME[beta, B, Range[0.,1.,0.1]]]<10^12, "QBDQueue: stDistr returns wrong sojourn time distribution!"];
Assert[Norm[(qlm-qlmFromMG)/qlm]<10^12, "QBDQueue: qlMoms returns wrong queue length moments!"];
Assert[Norm[(stm-stmFromME)/stm]<10^12, "QBDQueue: stMoms returns wrong sojourn time moments!"];
Print["========================================"]
Print["Testing BuTools function MAPMAP1"]
Print["Input:"//OutputForm];
Print["------"//OutputForm];
D0 = {{-8., 1., 2.},{0., -6., 4.},{3., 0., -3.}};
Print["D0 = "//OutputForm];
Print[D0];
D1 = {{4., 1., 0.},{0., 2., 0.},{0., 0., 0.}};
Print["D1 = "//OutputForm];
Print[D1];
S0 = {{-10., 4.},{0., -7.}};
Print["S0 = "//OutputForm];
Print[S0];
S1 = {{5., 1.},{4., 3.}};
Print["S1 = "//OutputForm];
Print[S1];
lambd = 1./MarginalMomentsFromMAP[D0, D1, 1][[1]];
Print["Test:"//OutputForm];
Print["-----"//OutputForm];
Print["{qld, qlm} = MAPMAP1[D0, D1, S0, S1, \"qlDistr\", Range[0,10,1], \"qlMoms\", 5];:"//OutputForm];
{qld, qlm} = MAPMAP1[D0, D1, S0, S1, "qlDistr", Range[0,10,1], "qlMoms", 5];
Print["qld = "//OutputForm];
Print[qld];
Print["qlm = "//OutputForm];
Print[qlm];
Print["{alphap, Ap} = MAPMAP1[D0, D1, S0, S1, \"qlDistrDPH\"];:"//OutputForm];
{alphap, Ap} = MAPMAP1[D0, D1, S0, S1, "qlDistrDPH"];
Print["alphap = "//OutputForm];
Print[alphap];
Print["Ap = "//OutputForm];
Print[Ap];
Print["{alpha, A} = MAPMAP1[D0, D1, S0, S1, \"qlDistrMG\"];:"//OutputForm];
{alpha, A} = MAPMAP1[D0, D1, S0, S1, "qlDistrMG"];
Print["alpha = "//OutputForm];
Print[alpha];
Print["A = "//OutputForm];
Print[A];
Print["qldFromDPH = PmfFromDPH[alphap, Ap, Range[0,10,1]];:"//OutputForm];
qldFromDPH = PmfFromDPH[alphap, Ap, Range[0,10,1]];
Print["qldFromDPH = "//OutputForm];
Print[qldFromDPH];
Print["qlmFromMG = MomentsFromMG[alpha, A, 5];:"//OutputForm];
qlmFromMG = MomentsFromMG[alpha, A, 5];
Print["qlmFromMG = "//OutputForm];
Print[qlmFromMG];
Print["{std, stm} = MAPMAP1[D0, D1, S0, S1, \"stDistr\", Range[0.,1.,0.1], \"stMoms\", 5];:"//OutputForm];
{std, stm} = MAPMAP1[D0, D1, S0, S1, "stDistr", Range[0.,1.,0.1], "stMoms", 5];
Print["std = "//OutputForm];
Print[std];
Print["stm = "//OutputForm];
Print[stm];
Print["{betap, Bp} = MAPMAP1[D0, D1, S0, S1, \"stDistrPH\"];:"//OutputForm];
{betap, Bp} = MAPMAP1[D0, D1, S0, S1, "stDistrPH"];
Print["betap = "//OutputForm];
Print[betap];
Print["Bp = "//OutputForm];
Print[Bp];
Print["{beta, B} = MAPMAP1[D0, D1, S0, S1, \"stDistrME\"];:"//OutputForm];
{beta, B} = MAPMAP1[D0, D1, S0, S1, "stDistrME"];
Print["beta = "//OutputForm];
Print[beta];
Print["B = "//OutputForm];
Print[B];
Print["stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];:"//OutputForm];
stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];
Print["stdFromPH = "//OutputForm];
Print[stdFromPH];
Print["stmFromME = MomentsFromME[beta, B, 5];:"//OutputForm];
stmFromME = MomentsFromME[beta, B, 5];
Print["stmFromME = "//OutputForm];
Print[stmFromME];
Assert[CheckMGRepresentation[alpha, A], "MAPMAP1: invalid MG representation of the queue length!"];
Assert[CheckMERepresentation[beta, B], "MAPMAP1: invalid ME representation of the sojourn time!"];
Assert[CheckDPHRepresentation[alphap, Ap], "MAPMAP1: invalid DPH representation of the queue length!"];
Assert[CheckPHRepresentation[betap, Bp], "MAPMAP1: invalid PH representation of the sojourn time!"];
Assert[Abs[qlm[[1]]-stm[[1]]*lambd]<10^12, "MAPMAP1: Little formula does not hold!"];
Assert[Norm[(MomentsFromDPH[alphap, Ap, 5]-qlmFromMG)/qlmFromMG]<10^12, "MAPMAP1: the MG and DPH representations are not equal!"];
Assert[Norm[(MomentsFromPH[betap, Bp, 5]-stmFromME)/stmFromME]<10^12, "MAPMAP1: the ME and PH representations are not equal!"];
Assert[Norm[qld-PmfFromMG[alpha, A, Range[0,10,1]]]<10^12, "MAPMAP1: qlDistr returns wrong queue length distribution!"];
Assert[Norm[std-CdfFromME[beta, B, Range[0.,1.,0.1]]]<10^12, "MAPMAP1: stDistr returns wrong sojourn time distribution!"];
Assert[Norm[(qlm-qlmFromMG)/qlm]<10^12, "MAPMAP1: qlMoms returns wrong queue length moments!"];
Assert[Norm[(stm-stmFromME)/stm]<10^12, "MAPMAP1: stMoms returns wrong sojourn time moments!"];
IA = IdentityMatrix[Dimensions[D0][[1]]];
IS = IdentityMatrix[Dimensions[S0][[1]]];
BuTools`Verbose = False;
{gamma, G} = QBDQueue[KroneckerProduct[IA, S1], KroneckerProduct[D0, IS]+KroneckerProduct[IA, S0], KroneckerProduct[D1, IS], KroneckerProduct[D0, IS], "stDistrME"];
BuTools`Verbose = True;
msmall = MomentsFromME[beta, B, 5];
mlarge = MomentsFromME[gamma, G, 5];
Assert[Norm[(msmall-mlarge)/msmall]<10^12, "MAPMAP1: Large and small model does not give the same results!"];
Print["Input:"//OutputForm];
Print["------"//OutputForm];
delta = {0.5,0.1,0.4};
Print["delta = "//OutputForm];
Print[delta];
Dm = {{-8., 1., 2.},{0., -6., 4.},{3., 0., -3.}};
Print["Dm = "//OutputForm];
Print[Dm];
sigma = {0.2,0.7,0.1};
Print["sigma = "//OutputForm];
Print[sigma];
S = {{-10., 4., 0.},{5., -7., 2.},{1., 2., -8.}};
Print["S = "//OutputForm];
Print[S];
Print["D0 = Dm;:"//OutputForm];
D0 = Dm;
Print["D1 = Transpose[{Total[-Dm,{2}]}].{delta};:"//OutputForm];
D1 = Transpose[{Total[-Dm,{2}]}].{delta};
Print["S0 = S;:"//OutputForm];
S0 = S;
Print["S1 = Transpose[{Total[-S,{2}]}].{sigma};:"//OutputForm];
S1 = Transpose[{Total[-S,{2}]}].{sigma};
lambd = 1./MarginalMomentsFromMAP[D0, D1, 1][[1]];
Print["Test:"//OutputForm];
Print["-----"//OutputForm];
Print["{qld, qlm} = MAPMAP1[D0, D1, S0, S1, \"qlDistr\", Range[0,10,1], \"qlMoms\", 5];:"//OutputForm];
{qld, qlm} = MAPMAP1[D0, D1, S0, S1, "qlDistr", Range[0,10,1], "qlMoms", 5];
Print["qld = "//OutputForm];
Print[qld];
Print["qlm = "//OutputForm];
Print[qlm];
Print["{alphap, Ap} = MAPMAP1[D0, D1, S0, S1, \"qlDistrDPH\"];:"//OutputForm];
{alphap, Ap} = MAPMAP1[D0, D1, S0, S1, "qlDistrDPH"];
Print["alphap = "//OutputForm];
Print[alphap];
Print["Ap = "//OutputForm];
Print[Ap];
Print["{alpha, A} = MAPMAP1[D0, D1, S0, S1, \"qlDistrMG\"];:"//OutputForm];
{alpha, A} = MAPMAP1[D0, D1, S0, S1, "qlDistrMG"];
Print["alpha = "//OutputForm];
Print[alpha];
Print["A = "//OutputForm];
Print[A];
Print["qldFromDPH = PmfFromDPH[alphap, Ap, Range[0,10,1]];:"//OutputForm];
qldFromDPH = PmfFromDPH[alphap, Ap, Range[0,10,1]];
Print["qldFromDPH = "//OutputForm];
Print[qldFromDPH];
Print["qlmFromMG = MomentsFromMG[alpha, A, 5];:"//OutputForm];
qlmFromMG = MomentsFromMG[alpha, A, 5];
Print["qlmFromMG = "//OutputForm];
Print[qlmFromMG];
Print["{std, stm} = MAPMAP1[D0, D1, S0, S1, \"stDistr\", Range[0.,1.,0.1], \"stMoms\", 5];:"//OutputForm];
{std, stm} = MAPMAP1[D0, D1, S0, S1, "stDistr", Range[0.,1.,0.1], "stMoms", 5];
Print["std = "//OutputForm];
Print[std];
Print["stm = "//OutputForm];
Print[stm];
Print["{betap, Bp} = MAPMAP1[D0, D1, S0, S1, \"stDistrPH\"];:"//OutputForm];
{betap, Bp} = MAPMAP1[D0, D1, S0, S1, "stDistrPH"];
Print["betap = "//OutputForm];
Print[betap];
Print["Bp = "//OutputForm];
Print[Bp];
Print["{beta, B} = MAPMAP1[D0, D1, S0, S1, \"stDistrME\"];:"//OutputForm];
{beta, B} = MAPMAP1[D0, D1, S0, S1, "stDistrME"];
Print["beta = "//OutputForm];
Print[beta];
Print["B = "//OutputForm];
Print[B];
Print["stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];:"//OutputForm];
stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];
Print["stdFromPH = "//OutputForm];
Print[stdFromPH];
Print["stmFromME = MomentsFromME[beta, B, 5];:"//OutputForm];
stmFromME = MomentsFromME[beta, B, 5];
Print["stmFromME = "//OutputForm];
Print[stmFromME];
Assert[CheckMGRepresentation[alpha, A], "MAPMAP1: invalid MG representation of the queue length!"];
Assert[CheckMERepresentation[beta, B], "MAPMAP1: invalid ME representation of the sojourn time!"];
Assert[CheckDPHRepresentation[alphap, Ap], "MAPMAP1: invalid DPH representation of the queue length!"];
Assert[CheckPHRepresentation[betap, Bp], "MAPMAP1: invalid PH representation of the sojourn time!"];
Assert[Abs[qlm[[1]]-stm[[1]]*lambd]<10^12, "MAPMAP1: Little formula does not hold!"];
Assert[Norm[(MomentsFromDPH[alphap, Ap, 5]-qlmFromMG)/qlmFromMG]<10^12, "MAPMAP1: the MG and DPH representations are not equal!"];
Assert[Norm[(MomentsFromPH[betap, Bp, 5]-stmFromME)/stmFromME]<10^12, "MAPMAP1: the ME and PH representations are not equal!"];
Assert[Norm[qld-PmfFromMG[alpha, A, Range[0,10,1]]]<10^12, "MAPMAP1: qlDistr returns wrong queue length distribution!"];
Assert[Norm[std-CdfFromME[beta, B, Range[0.,1.,0.1]]]<10^12, "MAPMAP1: stDistr returns wrong sojourn time distribution!"];
Assert[Norm[(qlm-qlmFromMG)/qlm]<10^12, "MAPMAP1: qlMoms returns wrong queue length moments!"];
Assert[Norm[(stm-stmFromME)/stm]<10^12, "MAPMAP1: stMoms returns wrong sojourn time moments!"];
IA = IdentityMatrix[Dimensions[D0][[1]]];
IS = IdentityMatrix[Dimensions[S0][[1]]];
BuTools`Verbose = False;
{gamma, G} = QBDQueue[KroneckerProduct[IA, S1], KroneckerProduct[D0, IS]+KroneckerProduct[IA, S0], KroneckerProduct[D1, IS], KroneckerProduct[D0, IS], "stDistrME"];
BuTools`Verbose = True;
msmall = MomentsFromME[beta, B, 5];
mlarge = MomentsFromME[gamma, G, 5];
Assert[Norm[(msmall-mlarge)/msmall]<10^12, "MAPMAP1: Large and small model does not give the same results!"];
Print["Input:"//OutputForm];
Print["------"//OutputForm];
D0 = {{-8., 2.},{1., -3.}};
Print["D0 = "//OutputForm];
Print[D0];
D1 = {{1., 5.},{0., 2.}};
Print["D1 = "//OutputForm];
Print[D1];
S0 = {{-10., 4.},{0., -7.}};
Print["S0 = "//OutputForm];
Print[S0];
S1 = {{5., 1.},{4., 3.}};
Print["S1 = "//OutputForm];
Print[S1];
lambd = 1./MarginalMomentsFromMAP[D0, D1, 1][[1]];
Print["Test:"//OutputForm];
Print["-----"//OutputForm];
Print["{qld, qlm} = MAPMAP1[D0, D1, S0, S1, \"qlDistr\", Range[0,10,1], \"qlMoms\", 5];:"//OutputForm];
{qld, qlm} = MAPMAP1[D0, D1, S0, S1, "qlDistr", Range[0,10,1], "qlMoms", 5];
Print["qld = "//OutputForm];
Print[qld];
Print["qlm = "//OutputForm];
Print[qlm];
Print["{alphap, Ap} = MAPMAP1[D0, D1, S0, S1, \"qlDistrDPH\"];:"//OutputForm];
{alphap, Ap} = MAPMAP1[D0, D1, S0, S1, "qlDistrDPH"];
Print["alphap = "//OutputForm];
Print[alphap];
Print["Ap = "//OutputForm];
Print[Ap];
Print["{alpha, A} = MAPMAP1[D0, D1, S0, S1, \"qlDistrMG\"];:"//OutputForm];
{alpha, A} = MAPMAP1[D0, D1, S0, S1, "qlDistrMG"];
Print["alpha = "//OutputForm];
Print[alpha];
Print["A = "//OutputForm];
Print[A];
Print["qldFromDPH = PmfFromDPH[alphap, Ap, Range[0,10,1]];:"//OutputForm];
qldFromDPH = PmfFromDPH[alphap, Ap, Range[0,10,1]];
Print["qldFromDPH = "//OutputForm];
Print[qldFromDPH];
Print["qlmFromMG = MomentsFromMG[alpha, A, 5];:"//OutputForm];
qlmFromMG = MomentsFromMG[alpha, A, 5];
Print["qlmFromMG = "//OutputForm];
Print[qlmFromMG];
Print["{std, stm} = MAPMAP1[D0, D1, S0, S1, \"stDistr\", Range[0.,1.,0.1], \"stMoms\", 5];:"//OutputForm];
{std, stm} = MAPMAP1[D0, D1, S0, S1, "stDistr", Range[0.,1.,0.1], "stMoms", 5];
Print["std = "//OutputForm];
Print[std];
Print["stm = "//OutputForm];
Print[stm];
Print["{betap, Bp} = MAPMAP1[D0, D1, S0, S1, \"stDistrPH\"];:"//OutputForm];
{betap, Bp} = MAPMAP1[D0, D1, S0, S1, "stDistrPH"];
Print["betap = "//OutputForm];
Print[betap];
Print["Bp = "//OutputForm];
Print[Bp];
Print["{beta, B} = MAPMAP1[D0, D1, S0, S1, \"stDistrME\"];:"//OutputForm];
{beta, B} = MAPMAP1[D0, D1, S0, S1, "stDistrME"];
Print["beta = "//OutputForm];
Print[beta];
Print["B = "//OutputForm];
Print[B];
Print["stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];:"//OutputForm];
stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];
Print["stdFromPH = "//OutputForm];
Print[stdFromPH];
Print["stmFromME = MomentsFromME[beta, B, 5];:"//OutputForm];
stmFromME = MomentsFromME[beta, B, 5];
Print["stmFromME = "//OutputForm];
Print[stmFromME];
Assert[CheckMGRepresentation[alpha, A], "MAPMAP1: invalid MG representation of the queue length!"];
Assert[CheckMERepresentation[beta, B], "MAPMAP1: invalid ME representation of the sojourn time!"];
Assert[CheckDPHRepresentation[alphap, Ap], "MAPMAP1: invalid DPH representation of the queue length!"];
Assert[CheckPHRepresentation[betap, Bp], "MAPMAP1: invalid PH representation of the sojourn time!"];
Assert[Abs[qlm[[1]]-stm[[1]]*lambd]<10^12, "MAPMAP1: Little formula does not hold!"];
Assert[Norm[(MomentsFromDPH[alphap, Ap, 5]-qlmFromMG)/qlmFromMG]<10^12, "MAPMAP1: the MG and DPH representations are not equal!"];
Assert[Norm[(MomentsFromPH[betap, Bp, 5]-stmFromME)/stmFromME]<10^12, "MAPMAP1: the ME and PH representations are not equal!"];
Assert[Norm[qld-PmfFromMG[alpha, A, Range[0,10,1]]]<10^12, "MAPMAP1: qlDistr returns wrong queue length distribution!"];
Assert[Norm[std-CdfFromME[beta, B, Range[0.,1.,0.1]]]<10^12, "MAPMAP1: stDistr returns wrong sojourn time distribution!"];
Assert[Norm[(qlm-qlmFromMG)/qlm]<10^12, "MAPMAP1: qlMoms returns wrong queue length moments!"];
Assert[Norm[(stm-stmFromME)/stm]<10^12, "MAPMAP1: stMoms returns wrong sojourn time moments!"];
IA = IdentityMatrix[Dimensions[D0][[1]]];
IS = IdentityMatrix[Dimensions[S0][[1]]];
BuTools`Verbose = False;
{gamma, G} = QBDQueue[KroneckerProduct[IA, S1], KroneckerProduct[D0, IS]+KroneckerProduct[IA, S0], KroneckerProduct[D1, IS], KroneckerProduct[D0, IS], "stDistrME"];
BuTools`Verbose = True;
msmall = MomentsFromME[beta, B, 5];
mlarge = MomentsFromME[gamma, G, 5];
Assert[Norm[(msmall-mlarge)/msmall]<10^12, "MAPMAP1: Large and small model does not give the same results!"];
Print["Input:"//OutputForm];
Print["------"//OutputForm];
S0 = {{-10., 4., 0.},{5., -7., 2.},{1., 2., -8.}};
Print["S0 = "//OutputForm];
Print[S0];
S1 = {{0., 0., 6.},{0., 0., 0.},{0., 3., 2.}};
Print["S1 = "//OutputForm];
Print[S1];
D0 = {{-8., 1., 2.},{0., -6., 4.},{3., 0., -3.}};
Print["D0 = "//OutputForm];
Print[D0];
D1 = {{4., 1., 0.},{0., 0., 2.},{0., 0., 0.}};
Print["D1 = "//OutputForm];
Print[D1];
lambd = 1./MarginalMomentsFromMAP[D0, D1, 1][[1]];
Print["Test:"//OutputForm];
Print["-----"//OutputForm];
Print["{qld, qlm} = MAPMAP1[D0, D1, S0, S1, \"qlDistr\", Range[0,10,1], \"qlMoms\", 5];:"//OutputForm];
{qld, qlm} = MAPMAP1[D0, D1, S0, S1, "qlDistr", Range[0,10,1], "qlMoms", 5];
Print["qld = "//OutputForm];
Print[qld];
Print["qlm = "//OutputForm];
Print[qlm];
Print["{alphap, Ap} = MAPMAP1[D0, D1, S0, S1, \"qlDistrDPH\"];:"//OutputForm];
{alphap, Ap} = MAPMAP1[D0, D1, S0, S1, "qlDistrDPH"];
Print["alphap = "//OutputForm];
Print[alphap];
Print["Ap = "//OutputForm];
Print[Ap];
Print["{alpha, A} = MAPMAP1[D0, D1, S0, S1, \"qlDistrMG\"];:"//OutputForm];
{alpha, A} = MAPMAP1[D0, D1, S0, S1, "qlDistrMG"];
Print["alpha = "//OutputForm];
Print[alpha];
Print["A = "//OutputForm];
Print[A];
Print["qldFromDPH = PmfFromDPH[alphap, Ap, Range[0,10,1]];:"//OutputForm];
qldFromDPH = PmfFromDPH[alphap, Ap, Range[0,10,1]];
Print["qldFromDPH = "//OutputForm];
Print[qldFromDPH];
Print["qlmFromMG = MomentsFromMG[alpha, A, 5];:"//OutputForm];
qlmFromMG = MomentsFromMG[alpha, A, 5];
Print["qlmFromMG = "//OutputForm];
Print[qlmFromMG];
Print["{std, stm} = MAPMAP1[D0, D1, S0, S1, \"stDistr\", Range[0.,1.,0.1], \"stMoms\", 5];:"//OutputForm];
{std, stm} = MAPMAP1[D0, D1, S0, S1, "stDistr", Range[0.,1.,0.1], "stMoms", 5];
Print["std = "//OutputForm];
Print[std];
Print["stm = "//OutputForm];
Print[stm];
Print["{betap, Bp} = MAPMAP1[D0, D1, S0, S1, \"stDistrPH\"];:"//OutputForm];
{betap, Bp} = MAPMAP1[D0, D1, S0, S1, "stDistrPH"];
Print["betap = "//OutputForm];
Print[betap];
Print["Bp = "//OutputForm];
Print[Bp];
Print["{beta, B} = MAPMAP1[D0, D1, S0, S1, \"stDistrME\"];:"//OutputForm];
{beta, B} = MAPMAP1[D0, D1, S0, S1, "stDistrME"];
Print["beta = "//OutputForm];
Print[beta];
Print["B = "//OutputForm];
Print[B];
Print["stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];:"//OutputForm];
stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];
Print["stdFromPH = "//OutputForm];
Print[stdFromPH];
Print["stmFromME = MomentsFromME[beta, B, 5];:"//OutputForm];
stmFromME = MomentsFromME[beta, B, 5];
Print["stmFromME = "//OutputForm];
Print[stmFromME];
Assert[CheckMGRepresentation[alpha, A], "MAPMAP1: invalid MG representation of the queue length!"];
Assert[CheckMERepresentation[beta, B], "MAPMAP1: invalid ME representation of the sojourn time!"];
Assert[CheckDPHRepresentation[alphap, Ap], "MAPMAP1: invalid DPH representation of the queue length!"];
Assert[CheckPHRepresentation[betap, Bp], "MAPMAP1: invalid PH representation of the sojourn time!"];
Assert[Abs[qlm[[1]]-stm[[1]]*lambd]<10^12, "MAPMAP1: Little formula does not hold!"];
Assert[Norm[(MomentsFromDPH[alphap, Ap, 5]-qlmFromMG)/qlmFromMG]<10^12, "MAPMAP1: the MG and DPH representations are not equal!"];
Assert[Norm[(MomentsFromPH[betap, Bp, 5]-stmFromME)/stmFromME]<10^12, "MAPMAP1: the ME and PH representations are not equal!"];
Assert[Norm[qld-PmfFromMG[alpha, A, Range[0,10,1]]]<10^12, "MAPMAP1: qlDistr returns wrong queue length distribution!"];
Assert[Norm[std-CdfFromME[beta, B, Range[0.,1.,0.1]]]<10^12, "MAPMAP1: stDistr returns wrong sojourn time distribution!"];
Assert[Norm[(qlm-qlmFromMG)/qlm]<10^12, "MAPMAP1: qlMoms returns wrong queue length moments!"];
Assert[Norm[(stm-stmFromME)/stm]<10^12, "MAPMAP1: stMoms returns wrong sojourn time moments!"];
IA = IdentityMatrix[Dimensions[D0][[1]]];
IS = IdentityMatrix[Dimensions[S0][[1]]];
BuTools`Verbose = False;
{gamma, G} = QBDQueue[KroneckerProduct[IA, S1], KroneckerProduct[D0, IS]+KroneckerProduct[IA, S0], KroneckerProduct[D1, IS], KroneckerProduct[D0, IS], "stDistrME"];
BuTools`Verbose = True;
msmall = MomentsFromME[beta, B, 5];
mlarge = MomentsFromME[gamma, G, 5];
Assert[Norm[(msmall-mlarge)/msmall]<10^12, "MAPMAP1: Large and small model does not give the same results!"];
Print["Input:"//OutputForm];
Print["------"//OutputForm];
D0 = {{-8., 1., 2.},{0., -6., 4.},{3., 0., -3.}};
Print["D0 = "//OutputForm];
Print[D0];
D1 = {{4., 1., 0.},{0., 0., 2.},{0., 0., 0.}};
Print["D1 = "//OutputForm];
Print[D1];
sigma = {0.2,0.7,0.1};
Print["sigma = "//OutputForm];
Print[sigma];
S = {{-10., 4., 0.},{5., -7., 2.},{1., 2., -8.}};
Print["S = "//OutputForm];
Print[S];
Print["S0 = S;:"//OutputForm];
S0 = S;
Print["S1 = Transpose[{Total[-S,{2}]}].{sigma};:"//OutputForm];
S1 = Transpose[{Total[-S,{2}]}].{sigma};
lambd = 1./MarginalMomentsFromMAP[D0, D1, 1][[1]];
Print["Test:"//OutputForm];
Print["-----"//OutputForm];
Print["{qld, qlm} = MAPMAP1[D0, D1, S0, S1, \"qlDistr\", Range[0,10,1], \"qlMoms\", 5];:"//OutputForm];
{qld, qlm} = MAPMAP1[D0, D1, S0, S1, "qlDistr", Range[0,10,1], "qlMoms", 5];
Print["qld = "//OutputForm];
Print[qld];
Print["qlm = "//OutputForm];
Print[qlm];
Print["{alphap, Ap} = MAPMAP1[D0, D1, S0, S1, \"qlDistrDPH\"];:"//OutputForm];
{alphap, Ap} = MAPMAP1[D0, D1, S0, S1, "qlDistrDPH"];
Print["alphap = "//OutputForm];
Print[alphap];
Print["Ap = "//OutputForm];
Print[Ap];
Print["{alpha, A} = MAPMAP1[D0, D1, S0, S1, \"qlDistrMG\"];:"//OutputForm];
{alpha, A} = MAPMAP1[D0, D1, S0, S1, "qlDistrMG"];
Print["alpha = "//OutputForm];
Print[alpha];
Print["A = "//OutputForm];
Print[A];
Print["qldFromDPH = PmfFromDPH[alphap, Ap, Range[0,10,1]];:"//OutputForm];
qldFromDPH = PmfFromDPH[alphap, Ap, Range[0,10,1]];
Print["qldFromDPH = "//OutputForm];
Print[qldFromDPH];
Print["qlmFromMG = MomentsFromMG[alpha, A, 5];:"//OutputForm];
qlmFromMG = MomentsFromMG[alpha, A, 5];
Print["qlmFromMG = "//OutputForm];
Print[qlmFromMG];
Print["{std, stm} = MAPMAP1[D0, D1, S0, S1, \"stDistr\", Range[0.,1.,0.1], \"stMoms\", 5];:"//OutputForm];
{std, stm} = MAPMAP1[D0, D1, S0, S1, "stDistr", Range[0.,1.,0.1], "stMoms", 5];
Print["std = "//OutputForm];
Print[std];
Print["stm = "//OutputForm];
Print[stm];
Print["{betap, Bp} = MAPMAP1[D0, D1, S0, S1, \"stDistrPH\"];:"//OutputForm];
{betap, Bp} = MAPMAP1[D0, D1, S0, S1, "stDistrPH"];
Print["betap = "//OutputForm];
Print[betap];
Print["Bp = "//OutputForm];
Print[Bp];
Print["{beta, B} = MAPMAP1[D0, D1, S0, S1, \"stDistrME\"];:"//OutputForm];
{beta, B} = MAPMAP1[D0, D1, S0, S1, "stDistrME"];
Print["beta = "//OutputForm];
Print[beta];
Print["B = "//OutputForm];
Print[B];
Print["stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];:"//OutputForm];
stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];
Print["stdFromPH = "//OutputForm];
Print[stdFromPH];
Print["stmFromME = MomentsFromME[beta, B, 5];:"//OutputForm];
stmFromME = MomentsFromME[beta, B, 5];
Print["stmFromME = "//OutputForm];
Print[stmFromME];
Assert[CheckMGRepresentation[alpha, A], "MAPMAP1: invalid MG representation of the queue length!"];
Assert[CheckMERepresentation[beta, B], "MAPMAP1: invalid ME representation of the sojourn time!"];
Assert[CheckDPHRepresentation[alphap, Ap], "MAPMAP1: invalid DPH representation of the queue length!"];
Assert[CheckPHRepresentation[betap, Bp], "MAPMAP1: invalid PH representation of the sojourn time!"];
Assert[Abs[qlm[[1]]-stm[[1]]*lambd]<10^12, "MAPMAP1: Little formula does not hold!"];
Assert[Norm[(MomentsFromDPH[alphap, Ap, 5]-qlmFromMG)/qlmFromMG]<10^12, "MAPMAP1: the MG and DPH representations are not equal!"];
Assert[Norm[(MomentsFromPH[betap, Bp, 5]-stmFromME)/stmFromME]<10^12, "MAPMAP1: the ME and PH representations are not equal!"];
Assert[Norm[qld-PmfFromMG[alpha, A, Range[0,10,1]]]<10^12, "MAPMAP1: qlDistr returns wrong queue length distribution!"];
Assert[Norm[std-CdfFromME[beta, B, Range[0.,1.,0.1]]]<10^12, "MAPMAP1: stDistr returns wrong sojourn time distribution!"];
Assert[Norm[(qlm-qlmFromMG)/qlm]<10^12, "MAPMAP1: qlMoms returns wrong queue length moments!"];
Assert[Norm[(stm-stmFromME)/stm]<10^12, "MAPMAP1: stMoms returns wrong sojourn time moments!"];
IA = IdentityMatrix[Dimensions[D0][[1]]];
IS = IdentityMatrix[Dimensions[S0][[1]]];
BuTools`Verbose = False;
{gamma, G} = QBDQueue[KroneckerProduct[IA, S1], KroneckerProduct[D0, IS]+KroneckerProduct[IA, S0], KroneckerProduct[D1, IS], KroneckerProduct[D0, IS], "stDistrME"];
BuTools`Verbose = True;
msmall = MomentsFromME[beta, B, 5];
mlarge = MomentsFromME[gamma, G, 5];
Assert[Norm[(msmall-mlarge)/msmall]<10^12, "MAPMAP1: Large and small model do not give the same results!"];
Print["========================================"]
Print["Testing BuTools function MMAPPH1PRPR"]
Print["Input:"//OutputForm];
Print["------"//OutputForm];
D0 = {{-5.49, 0., 1.15, 0.},{0., -2.29, 0., 0.},{0., 0.08, -1.32, 0.},{0.72, 1.17, 0.7, -7.07}};
Print["D0 = "//OutputForm];
Print[D0];
D1 = {{0.25, 0.38, 0.64, 0.},{0., 0., 0., 1.09},{0., 1.24, 0., 0.},{0.37, 0., 0., 0.}};
Print["D1 = "//OutputForm];
Print[D1];
D2 = {{0.3, 1.0, 0., 0.48},{0., 0.2, 0., 0.},{0., 0., 0., 0.},{0.61, 0., 0., 0.2}};
Print["D2 = "//OutputForm];
Print[D2];
D3 = {{0., 0.98, 0., 0.31},{0., 0., 1.0, 0.},{0., 0., 0., 0.},{1.1, 0.84, 0.33, 1.03}};
Print["D3 = "//OutputForm];
Print[D3];
sigma3 = {0.83333,0.11404,0.05263};
Print["sigma3 = "//OutputForm];
Print[sigma3];
S3 = {{-3., 0., 0.},{0.73077, -0.73077, 0.},{0., 0.5, -0.5}};
Print["S3 = "//OutputForm];
Print[S3];
sigma2 = {1.};
Print["sigma2 = "//OutputForm];
Print[sigma2];
S2 = {{-2.}};
Print["S2 = "//OutputForm];
Print[S2];
sigma1 = {0.25,0.75};
Print["sigma1 = "//OutputForm];
Print[sigma1];
S1 = {{-2.5, 2.5},{0., -10.}};
Print["S1 = "//OutputForm];
Print[S1];
Print["Test:"//OutputForm];
Print["-----"//OutputForm];
Print["{qlm, qld} = MMAPPH1PRPR[{D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, \"qlMoms\", 3, \"qlDistr\", 500];:"//OutputForm];
{qlm, qld} = MMAPPH1PRPR[{D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, "qlMoms", 3, "qlDistr", 500];
momFromDistr = Join[{Range[0,499,1]},{Range[0,499,1]^2},{Range[0,499,1]^3}].qld;
Assert[Norm[(momFromDistr-qlm)/qlm]<0.001, "MMAPPH1PRPR: queue length moments and queue length distribution are not consistent!"];
distrPoints = {1., 5., 10.};
Print["{stm, std} = MMAPPH1PRPR[{D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, \"stMoms\", 3, \"stDistr\", distrPoints];:"//OutputForm];
{stm, std} = MMAPPH1PRPR[{D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, "stMoms", 3, "stDistr", distrPoints];
Print["stm = "//OutputForm];
Print[stm];
Print["std = "//OutputForm];
Print[std];
Assert[Min[std]>=0&&Max[std]<=1&&AllTrue[Flatten[Differences[std]],#>=0 &], "MMAPPH1PRPR: invalid sojourn time distribution!"];
lambda1 = 1./MarginalMomentsFromMAP[D0+D2+D3, D1, 1][[1]];
lambda2 = 1./MarginalMomentsFromMAP[D0+D1+D3, D2, 1][[1]];
lambda3 = 1./MarginalMomentsFromMAP[D0+D1+D2, D3, 1][[1]];
Assert[Abs[qlm[[1, 1]]-stm[[1, 1]]*lambda1]<10^12, "MMAPPH1PRPR: Little formula does not hold for class 1!"];
Assert[Abs[qlm[[1, 2]]-stm[[1, 2]]*lambda2]<10^12, "MMAPPH1PRPR: Little formula does not hold for class 2!"];
Assert[Abs[qlm[[1, 3]]-stm[[1, 3]]*lambda3]<10^12, "MMAPPH1PRPR: Little formula does not hold for class 3!"];
Print["Input:"//OutputForm];
Print["------"//OutputForm];
D0 = {{-5.49, 0., 1.15, 0.},{0., -2.29, 0., 0.},{0., 0.08, -1.32, 0.},{0.72, 1.17, 0.7, -7.07}};
Print["D0 = "//OutputForm];
Print[D0];
D1 = {{0.25, 0.38, 0.64, 0.},{0., 0., 0., 1.09},{0., 1.24, 0., 0.},{0.37, 0., 0., 0.}};
Print["D1 = "//OutputForm];
Print[D1];
D2 = {{0.3, 1.0, 0., 0.48},{0., 0.2, 0., 0.},{0., 0., 0., 0.},{0.61, 0., 0., 0.2}};
Print["D2 = "//OutputForm];
Print[D2];
D3 = {{0., 0.98, 0., 0.31},{0., 0., 1.0, 0.},{0., 0., 0., 0.},{1.1, 0.84, 0.33, 1.03}};
Print["D3 = "//OutputForm];
Print[D3];
sigma3 = {0.16667,0.83333};
Print["sigma3 = "//OutputForm];
Print[sigma3];
S3 = {{-0.5, 0.5},{0., -3.}};
Print["S3 = "//OutputForm];
Print[S3];
sigma2 = {0.58824,0.41176};
Print["sigma2 = "//OutputForm];
Print[sigma2];
S2 = {{-2.3529, 2.3529},{0., -4.}};
Print["S2 = "//OutputForm];
Print[S2];
sigma1 = {0.25,0.75};
Print["sigma1 = "//OutputForm];
Print[sigma1];
S1 = {{-2.5, 2.5},{0., -10.}};
Print["S1 = "//OutputForm];
Print[S1];
Print["Test:"//OutputForm];
Print["-----"//OutputForm];
Print["{qlm, qld} = MMAPPH1PRPR[{D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, \"qlMoms\", 3, \"qlDistr\", 500];:"//OutputForm];
{qlm, qld} = MMAPPH1PRPR[{D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, "qlMoms", 3, "qlDistr", 500];
momFromDistr = Join[{Range[0,499,1]},{Range[0,499,1]^2},{Range[0,499,1]^3}].qld;
Assert[Norm[(momFromDistr-qlm)/qlm]<0.001, "MMAPPH1PRPR: queue length moments and queue length distribution are not consistent!"];
distrPoints = {1., 5., 10.};
Print["{stm, std} = MMAPPH1PRPR[{D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, \"stMoms\", 3, \"stDistr\", distrPoints];:"//OutputForm];
{stm, std} = MMAPPH1PRPR[{D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, "stMoms", 3, "stDistr", distrPoints];
Print["stm = "//OutputForm];
Print[stm];
Print["std = "//OutputForm];
Print[std];
Assert[Min[std]>=0&&Max[std]<=1&&AllTrue[Flatten[Differences[std]],#>=0 &], "MMAPPH1PRPR: invalid sojourn time distribution!"];
lambda1 = 1./MarginalMomentsFromMAP[D0+D2+D3, D1, 1][[1]];
lambda2 = 1./MarginalMomentsFromMAP[D0+D1+D3, D2, 1][[1]];
lambda3 = 1./MarginalMomentsFromMAP[D0+D1+D2, D3, 1][[1]];
Assert[Abs[qlm[[1, 1]]-stm[[1, 1]]*lambda1]<10^12, "MMAPPH1PRPR: Little formula does not hold for class 1!"];
Assert[Abs[qlm[[1, 2]]-stm[[1, 2]]*lambda2]<10^12, "MMAPPH1PRPR: Little formula does not hold for class 2!"];
Assert[Abs[qlm[[1, 3]]-stm[[1, 3]]*lambda3]<10^12, "MMAPPH1PRPR: Little formula does not hold for class 3!"];
Print["========================================"]
Print["Testing BuTools function MMAPPH1NPPR"]
Print["Input:"//OutputForm];
Print["------"//OutputForm];
D0 = {{-5.49, 0., 1.15, 0.},{0., -2.29, 0., 0.},{0., 0.08, -1.32, 0.},{0.72, 1.17, 0.7, -7.07}};
Print["D0 = "//OutputForm];
Print[D0];
D1 = {{0.25, 0.38, 0.64, 0.},{0., 0., 0., 1.09},{0., 1.24, 0., 0.},{0.37, 0., 0., 0.}};
Print["D1 = "//OutputForm];
Print[D1];
D2 = {{0.3, 1.0, 0., 0.48},{0., 0.2, 0., 0.},{0., 0., 0., 0.},{0.61, 0., 0., 0.2}};
Print["D2 = "//OutputForm];
Print[D2];
D3 = {{0., 0.98, 0., 0.31},{0., 0., 1.0, 0.},{0., 0., 0., 0.},{1.1, 0.84, 0.33, 1.03}};
Print["D3 = "//OutputForm];
Print[D3];
sigma3 = {0.83333,0.11404,0.05263};
Print["sigma3 = "//OutputForm];
Print[sigma3];
S3 = {{-3., 0., 0.},{0.73077, -0.73077, 0.},{0., 0.5, -0.5}};
Print["S3 = "//OutputForm];
Print[S3];
sigma2 = {1.};
Print["sigma2 = "//OutputForm];
Print[sigma2];
S2 = {{-2.}};
Print["S2 = "//OutputForm];
Print[S2];
sigma1 = {0.25,0.75};
Print["sigma1 = "//OutputForm];
Print[sigma1];
S1 = {{-2.5, 2.5},{0., -10.}};
Print["S1 = "//OutputForm];
Print[S1];
Print["Test:"//OutputForm];
Print["-----"//OutputForm];
Print["{qlm, qld} = MMAPPH1NPPR[{D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, \"qlMoms\", 3, \"qlDistr\", 500];:"//OutputForm];
{qlm, qld} = MMAPPH1NPPR[{D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, "qlMoms", 3, "qlDistr", 500];
momFromDistr = Join[{Range[0,499,1]},{Range[0,499,1]^2},{Range[0,499,1]^3}].qld;
Assert[Norm[(momFromDistr-qlm)/qlm]<0.001, "MMAPPH1NPPR: queue length moments and queue length distribution are not consistent!"];
distrPoints = {1., 5., 10.};
Print["{stm, std} = MMAPPH1NPPR[{D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, \"stMoms\", 3, \"stDistr\", distrPoints];:"//OutputForm];
{stm, std} = MMAPPH1NPPR[{D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, "stMoms", 3, "stDistr", distrPoints];
Print["stm = "//OutputForm];
Print[stm];
Print["std = "//OutputForm];
Print[std];
Assert[Min[std]>=0&&Max[std]<=1&&AllTrue[Flatten[Differences[std]],#>=0 &], "MMAPPH1NPPR: invalid sojourn time distribution!"];
lambda1 = 1./MarginalMomentsFromMAP[D0+D2+D3, D1, 1][[1]];
lambda2 = 1./MarginalMomentsFromMAP[D0+D1+D3, D2, 1][[1]];
lambda3 = 1./MarginalMomentsFromMAP[D0+D1+D2, D3, 1][[1]];
Assert[Abs[qlm[[1, 1]]-stm[[1, 1]]*lambda1]<10^12, "MMAPPH1NPPR: Little formula does not hold for class 1!"];
Assert[Abs[qlm[[1, 2]]-stm[[1, 2]]*lambda2]<10^12, "MMAPPH1NPPR: Little formula does not hold for class 2!"];
Assert[Abs[qlm[[1, 3]]-stm[[1, 3]]*lambda3]<10^12, "MMAPPH1NPPR: Little formula does not hold for class 3!"];
Print["Input:"//OutputForm];
Print["------"//OutputForm];
D0 = {{-5.49, 0., 1.15, 0.},{0., -2.29, 0., 0.},{0., 0.08, -1.32, 0.},{0.72, 1.17, 0.7, -7.07}};
Print["D0 = "//OutputForm];
Print[D0];
D1 = {{0.25, 0.38, 0.64, 0.},{0., 0., 0., 1.09},{0., 1.24, 0., 0.},{0.37, 0., 0., 0.}};
Print["D1 = "//OutputForm];
Print[D1];
D2 = {{0.3, 1.0, 0., 0.48},{0., 0.2, 0., 0.},{0., 0., 0., 0.},{0.61, 0., 0., 0.2}};
Print["D2 = "//OutputForm];
Print[D2];
D3 = {{0., 0.98, 0., 0.31},{0., 0., 1.0, 0.},{0., 0., 0., 0.},{1.1, 0.84, 0.33, 1.03}};
Print["D3 = "//OutputForm];
Print[D3];
sigma3 = {0.16667,0.83333};
Print["sigma3 = "//OutputForm];
Print[sigma3];
S3 = {{-0.5, 0.5},{0., -3.}};
Print["S3 = "//OutputForm];
Print[S3];
sigma2 = {0.58824,0.41176};
Print["sigma2 = "//OutputForm];
Print[sigma2];
S2 = {{-2.3529, 2.3529},{0., -4.}};
Print["S2 = "//OutputForm];
Print[S2];
sigma1 = {0.25,0.75};
Print["sigma1 = "//OutputForm];
Print[sigma1];
S1 = {{-2.5, 2.5},{0., -10.}};
Print["S1 = "//OutputForm];
Print[S1];
Print["Test:"//OutputForm];
Print["-----"//OutputForm];
Print["{qlm, qld} = MMAPPH1NPPR[{D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, \"qlMoms\", 3, \"qlDistr\", 500];:"//OutputForm];
{qlm, qld} = MMAPPH1NPPR[{D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, "qlMoms", 3, "qlDistr", 500];
momFromDistr = Join[{Range[0,499,1]},{Range[0,499,1]^2},{Range[0,499,1]^3}].qld;
Assert[Norm[(momFromDistr-qlm)/qlm]<0.001, "MMAPPH1NPPR: queue length moments and queue length distribution are not consistent!"];
distrPoints = {1., 5., 10.};
Print["{stm, std} = MMAPPH1NPPR[{D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, \"stMoms\", 3, \"stDistr\", distrPoints];:"//OutputForm];
{stm, std} = MMAPPH1NPPR[{D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, "stMoms", 3, "stDistr", distrPoints];
Print["stm = "//OutputForm];
Print[stm];
Print["std = "//OutputForm];
Print[std];
Assert[Min[std]>=0&&Max[std]<=1&&AllTrue[Flatten[Differences[std]],#>=0 &], "MMAPPH1NPPR: invalid sojourn time distribution!"];
lambda1 = 1./MarginalMomentsFromMAP[D0+D2+D3, D1, 1][[1]];
lambda2 = 1./MarginalMomentsFromMAP[D0+D1+D3, D2, 1][[1]];
lambda3 = 1./MarginalMomentsFromMAP[D0+D1+D2, D3, 1][[1]];
Assert[Abs[qlm[[1, 1]]-stm[[1, 1]]*lambda1]<10^12, "MMAPPH1NPPR: Little formula does not hold for class 1!"];
Assert[Abs[qlm[[1, 2]]-stm[[1, 2]]*lambda2]<10^12, "MMAPPH1NPPR: Little formula does not hold for class 2!"];
Assert[Abs[qlm[[1, 3]]-stm[[1, 3]]*lambda3]<10^12, "MMAPPH1NPPR: Little formula does not hold for class 3!"];
Print["========================================"]
Print["Testing BuTools function FluidQueue"]
Print["Input:"//OutputForm];
Print["------"//OutputForm];
Q = {{-9., 2., 4., 0., 1., 2.},{6., -25., 5., 3., 7., 4.},{1., 3., -4., 0., 0., 0.},{0., 0., 0., -8., 3., 5.},{7., 3., 0., 2., -13., 1.},{7., 8., 0., 3., 8., -26.}};
Print["Q = "//OutputForm];
Print[Q];
vRin = {4.,2.,1.,0.,0.,3.};
Print["vRin = "//OutputForm];
Print[vRin];
vRout = {6.,2.,0.,0.,3.,2.};
Print["vRout = "//OutputForm];
Print[vRout];
Print["Rin = DiagonalMatrix[vRin];:"//OutputForm];
Rin = DiagonalMatrix[vRin];
Print["Rout = DiagonalMatrix[vRout];:"//OutputForm];
Rout = DiagonalMatrix[vRout];
lambd = Total[CTMCSolve[Q].Rin];
Print["Test:"//OutputForm];
Print["-----"//OutputForm];
Print["{qld, qlm} = FluidQueue[Q, Rin, Rout, \"qlDistr\", Range[0.,1.,0.1], \"qlMoms\", 5];:"//OutputForm];
{qld, qlm} = FluidQueue[Q, Rin, Rout, "qlDistr", Range[0.,1.,0.1], "qlMoms", 5];
Print["qld = "//OutputForm];
Print[qld];
Print["qlm = "//OutputForm];
Print[qlm];
Print["{alphap, Ap} = FluidQueue[Q, Rin, Rout, \"qlDistrPH\"];:"//OutputForm];
{alphap, Ap} = FluidQueue[Q, Rin, Rout, "qlDistrPH"];
Print["alphap = "//OutputForm];
Print[alphap];
Print["Ap = "//OutputForm];
Print[Ap];
Print["{alpha, A} = FluidQueue[Q, Rin, Rout, \"qlDistrME\"];:"//OutputForm];
{alpha, A} = FluidQueue[Q, Rin, Rout, "qlDistrME"];
Print["alpha = "//OutputForm];
Print[alpha];
Print["A = "//OutputForm];
Print[A];
Print["qldFromPH = CdfFromPH[alphap, Ap, Range[0.,1.,0.1]];:"//OutputForm];
qldFromPH = CdfFromPH[alphap, Ap, Range[0.,1.,0.1]];
Print["qldFromPH = "//OutputForm];
Print[qldFromPH];
Print["qlmFromME = MomentsFromME[alpha, A, 5];:"//OutputForm];
qlmFromME = MomentsFromME[alpha, A, 5];
Print["qlmFromME = "//OutputForm];
Print[qlmFromME];
Print["{std, stm} = FluidQueue[Q, Rin, Rout, \"stDistr\", Range[0.,1.,0.1], \"stMoms\", 5];:"//OutputForm];
{std, stm} = FluidQueue[Q, Rin, Rout, "stDistr", Range[0.,1.,0.1], "stMoms", 5];
Print["std = "//OutputForm];
Print[std];
Print["stm = "//OutputForm];
Print[stm];
Print["{betap, Bp} = FluidQueue[Q, Rin, Rout, \"stDistrPH\"];:"//OutputForm];
{betap, Bp} = FluidQueue[Q, Rin, Rout, "stDistrPH"];
Print["betap = "//OutputForm];
Print[betap];
Print["Bp = "//OutputForm];
Print[Bp];
Print["{beta, B} = FluidQueue[Q, Rin, Rout, \"stDistrME\"];:"//OutputForm];
{beta, B} = FluidQueue[Q, Rin, Rout, "stDistrME"];
Print["beta = "//OutputForm];
Print[beta];
Print["B = "//OutputForm];
Print[B];
Print["stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];:"//OutputForm];
stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];
Print["stdFromPH = "//OutputForm];
Print[stdFromPH];
Print["stmFromME = MomentsFromME[beta, B, 5];:"//OutputForm];
stmFromME = MomentsFromME[beta, B, 5];
Print["stmFromME = "//OutputForm];
Print[stmFromME];
Assert[CheckMERepresentation[alpha, A], "FluidQueue: invalid ME representation of the queue length!"];
Assert[CheckMERepresentation[beta, B], "FluidQueue: invalid ME representation of the sojourn time!"];
Assert[CheckPHRepresentation[alphap, Ap], "FluidQueue: invalid PH representation of the queue length!"];
Assert[CheckPHRepresentation[betap, Bp], "FluidQueue: invalid PH representation of the sojourn time!"];
Assert[Abs[qlm[[1]]-stm[[1]]*lambd]<10^12, "FluidQueue: Little formula does not hold!"];
Assert[Norm[(MomentsFromPH[alphap, Ap, 5]-qlmFromME)/qlmFromME]<10^12, "FluidQueue: the ME and PH representations are not equal!"];
Assert[Norm[(MomentsFromPH[betap, Bp, 5]-stmFromME)/stmFromME]<10^12, "FluidQueue: the ME and PH representations are not equal!"];
Assert[Norm[qld-CdfFromME[alpha, A, Range[0.,1.,0.1]]]<10^12, "FluidQueue: qlDistr returns wrong queue length distribution!"];
Assert[Norm[std-CdfFromME[beta, B, Range[0.,1.,0.1]]]<10^12, "FluidQueue: stDistr returns wrong sojourn time distribution!"];
Assert[Norm[(qlm-qlmFromME)/qlm]<10^12, "FluidQueue: qlMoms returns wrong queue length moments!"];
Assert[Norm[(stm-stmFromME)/stm]<10^12, "FluidQueue: stMoms returns wrong sojourn time moments!"];
Print["========================================"]
Print["Testing BuTools function FluFluQueue"]
Print["Input:"//OutputForm];
Print["------"//OutputForm];
Qin = {{-2., 1., 1.},{2., -5., 3.},{4., 0., -4.}};
Print["Qin = "//OutputForm];
Print[Qin];
vRin = {3.,7.,0.};
Print["vRin = "//OutputForm];
Print[vRin];
Print["Rin = DiagonalMatrix[vRin];:"//OutputForm];
Rin = DiagonalMatrix[vRin];
Qout = {{-4., 1., 3.},{6., -8., 2.},{3., 7., -10.}};
Print["Qout = "//OutputForm];
Print[Qout];
vRout = {1.,7.,15.};
Print["vRout = "//OutputForm];
Print[vRout];
Print["Rout = DiagonalMatrix[vRout];:"//OutputForm];
Rout = DiagonalMatrix[vRout];
lambd = Total[CTMCSolve[Qin].Rin];
Print["Test:"//OutputForm];
Print["-----"//OutputForm];
Print["{qld, qlm} = FluFluQueue[Qin, Rin, Qout, Rout, False, \"qlDistr\", Range[0.,1.,0.1], \"qlMoms\", 5];:"//OutputForm];
{qld, qlm} = FluFluQueue[Qin, Rin, Qout, Rout, False, "qlDistr", Range[0.,1.,0.1], "qlMoms", 5];
Print["qld = "//OutputForm];
Print[qld];
Print["qlm = "//OutputForm];
Print[qlm];
Print["{alphap, Ap} = FluFluQueue[Qin, Rin, Qout, Rout, False, \"qlDistrPH\"];:"//OutputForm];
{alphap, Ap} = FluFluQueue[Qin, Rin, Qout, Rout, False, "qlDistrPH"];
Print["alphap = "//OutputForm];
Print[alphap];
Print["Ap = "//OutputForm];
Print[Ap];
Print["{alpha, A} = FluFluQueue[Qin, Rin, Qout, Rout, False, \"qlDistrME\"];:"//OutputForm];
{alpha, A} = FluFluQueue[Qin, Rin, Qout, Rout, False, "qlDistrME"];
Print["alpha = "//OutputForm];
Print[alpha];
Print["A = "//OutputForm];
Print[A];
Print["qldFromPH = CdfFromPH[alphap, Ap, Range[0.,1.,0.1]];:"//OutputForm];
qldFromPH = CdfFromPH[alphap, Ap, Range[0.,1.,0.1]];
Print["qldFromPH = "//OutputForm];
Print[qldFromPH];
Print["qlmFromME = MomentsFromME[alpha, A, 5];:"//OutputForm];
qlmFromME = MomentsFromME[alpha, A, 5];
Print["qlmFromME = "//OutputForm];
Print[qlmFromME];
Print["{std, stm} = FluFluQueue[Qin, Rin, Qout, Rout, False, \"stDistr\", Range[0.,1.,0.1], \"stMoms\", 5];:"//OutputForm];
{std, stm} = FluFluQueue[Qin, Rin, Qout, Rout, False, "stDistr", Range[0.,1.,0.1], "stMoms", 5];
Print["std = "//OutputForm];
Print[std];
Print["stm = "//OutputForm];
Print[stm];
Print["{betap, Bp} = FluFluQueue[Qin, Rin, Qout, Rout, False, \"stDistrPH\"];:"//OutputForm];
{betap, Bp} = FluFluQueue[Qin, Rin, Qout, Rout, False, "stDistrPH"];
Print["betap = "//OutputForm];
Print[betap];
Print["Bp = "//OutputForm];
Print[Bp];
Print["{beta, B} = FluFluQueue[Qin, Rin, Qout, Rout, False, \"stDistrME\"];:"//OutputForm];
{beta, B} = FluFluQueue[Qin, Rin, Qout, Rout, False, "stDistrME"];
Print["beta = "//OutputForm];
Print[beta];
Print["B = "//OutputForm];
Print[B];
Print["stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];:"//OutputForm];
stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];
Print["stdFromPH = "//OutputForm];
Print[stdFromPH];
Print["stmFromME = MomentsFromME[beta, B, 5];:"//OutputForm];
stmFromME = MomentsFromME[beta, B, 5];
Print["stmFromME = "//OutputForm];
Print[stmFromME];
Assert[CheckMERepresentation[alpha, A], "FluFluQueue: invalid ME representation of the queue length!"];
Assert[CheckMERepresentation[beta, B], "FluFluQueue: invalid ME representation of the sojourn time!"];
Assert[CheckPHRepresentation[alphap, Ap], "FluFluQueue: invalid PH representation of the queue length!"];
Assert[CheckPHRepresentation[betap, Bp], "FluFluQueue: invalid PH representation of the sojourn time!"];
Assert[Abs[qlm[[1]]-stm[[1]]*lambd]<10^12, "FluFluQueue: Little formula does not hold!"];
Assert[Norm[(MomentsFromPH[alphap, Ap, 5]-qlmFromME)/qlmFromME]<10^12, "FluFluQueue: the ME and PH representations are not equal!"];
Assert[Norm[(MomentsFromPH[betap, Bp, 5]-stmFromME)/stmFromME]<10^12, "FluFluQueue: the ME and PH representations are not equal!"];
Assert[Norm[qld-CdfFromME[alpha, A, Range[0.,1.,0.1]]]<10^12, "FluFluQueue: qlDistr returns wrong queue length distribution!"];
Assert[Norm[std-CdfFromME[beta, B, Range[0.,1.,0.1]]]<10^12, "FluFluQueue: stDistr returns wrong sojourn time distribution!"];
Assert[Norm[(qlm-qlmFromME)/qlm]<10^12, "FluFluQueue: qlMoms returns wrong queue length moments!"];
Assert[Norm[(stm-stmFromME)/stm]<10^12, "FluFluQueue: stMoms returns wrong sojourn time moments!"];
Iin = IdentityMatrix[Dimensions[Qin][[1]]];
Iout = IdentityMatrix[Dimensions[Qout][[1]]];
BuTools`Verbose = False;
{gamma, G} = FluidQueue[KroneckerProduct[Qin, Iout]+KroneckerProduct[Iin, Qout], KroneckerProduct[Rin, Iout], KroneckerProduct[Iin, Rout], "stDistrME"];
BuTools`Verbose = True;
msmall = MomentsFromME[beta, B, 5];
mlarge = MomentsFromME[gamma, G, 5];
Assert[Norm[(msmall-mlarge)/msmall]<10^12, "FluFluQueue: Large and small model do not give the same results!"];
Print["Test:"//OutputForm];
Print["-----"//OutputForm];
Print["{qld, qlm} = FluFluQueue[Qin, Rin, Qout, Rout, True, \"qlDistr\", Range[0.,1.,0.1], \"qlMoms\", 5];:"//OutputForm];
{qld, qlm} = FluFluQueue[Qin, Rin, Qout, Rout, True, "qlDistr", Range[0.,1.,0.1], "qlMoms", 5];
Print["qld = "//OutputForm];
Print[qld];
Print["qlm = "//OutputForm];
Print[qlm];
Print["{alphap, Ap} = FluFluQueue[Qin, Rin, Qout, Rout, True, \"qlDistrPH\"];:"//OutputForm];
{alphap, Ap} = FluFluQueue[Qin, Rin, Qout, Rout, True, "qlDistrPH"];
Print["alphap = "//OutputForm];
Print[alphap];
Print["Ap = "//OutputForm];
Print[Ap];
Print["{alpha, A} = FluFluQueue[Qin, Rin, Qout, Rout, True, \"qlDistrME\"];:"//OutputForm];
{alpha, A} = FluFluQueue[Qin, Rin, Qout, Rout, True, "qlDistrME"];
Print["alpha = "//OutputForm];
Print[alpha];
Print["A = "//OutputForm];
Print[A];
Print["qldFromPH = CdfFromPH[alphap, Ap, Range[0.,1.,0.1]];:"//OutputForm];
qldFromPH = CdfFromPH[alphap, Ap, Range[0.,1.,0.1]];
Print["qldFromPH = "//OutputForm];
Print[qldFromPH];
Print["qlmFromME = MomentsFromME[alpha, A, 5];:"//OutputForm];
qlmFromME = MomentsFromME[alpha, A, 5];
Print["qlmFromME = "//OutputForm];
Print[qlmFromME];
Print["{std, stm} = FluFluQueue[Qin, Rin, Qout, Rout, True, \"stDistr\", Range[0.,1.,0.1], \"stMoms\", 5];:"//OutputForm];
{std, stm} = FluFluQueue[Qin, Rin, Qout, Rout, True, "stDistr", Range[0.,1.,0.1], "stMoms", 5];
Print["std = "//OutputForm];
Print[std];
Print["stm = "//OutputForm];
Print[stm];
Print["{betap, Bp} = FluFluQueue[Qin, Rin, Qout, Rout, True, \"stDistrPH\"];:"//OutputForm];
{betap, Bp} = FluFluQueue[Qin, Rin, Qout, Rout, True, "stDistrPH"];
Print["betap = "//OutputForm];
Print[betap];
Print["Bp = "//OutputForm];
Print[Bp];
Print["{beta, B} = FluFluQueue[Qin, Rin, Qout, Rout, True, \"stDistrME\"];:"//OutputForm];
{beta, B} = FluFluQueue[Qin, Rin, Qout, Rout, True, "stDistrME"];
Print["beta = "//OutputForm];
Print[beta];
Print["B = "//OutputForm];
Print[B];
Print["stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];:"//OutputForm];
stdFromPH = CdfFromPH[betap, Bp, Range[0.,1.,0.1]];
Print["stdFromPH = "//OutputForm];
Print[stdFromPH];
Print["stmFromME = MomentsFromME[beta, B, 5];:"//OutputForm];
stmFromME = MomentsFromME[beta, B, 5];
Print["stmFromME = "//OutputForm];
Print[stmFromME];
Assert[CheckMERepresentation[alpha, A], "FluFluQueue: invalid ME representation of the queue length!"];
Assert[CheckMERepresentation[beta, B], "FluFluQueue: invalid ME representation of the sojourn time!"];
Assert[CheckPHRepresentation[alphap, Ap], "FluFluQueue: invalid PH representation of the queue length!"];
Assert[CheckPHRepresentation[betap, Bp], "FluFluQueue: invalid PH representation of the sojourn time!"];
Assert[Abs[qlm[[1]]-stm[[1]]*lambd]<10^12, "FluFluQueue: Little formula does not hold!"];
Assert[Norm[(MomentsFromPH[alphap, Ap, 5]-qlmFromME)/qlmFromME]<10^12, "FluFluQueue: the ME and PH representations are not equal!"];
Assert[Norm[(MomentsFromPH[betap, Bp, 5]-stmFromME)/stmFromME]<10^12, "FluFluQueue: the ME and PH representations are not equal!"];
Assert[Norm[qld-CdfFromME[alpha, A, Range[0.,1.,0.1]]]<10^12, "FluFluQueue: qlDistr returns wrong queue length distribution!"];
Assert[Norm[std-CdfFromME[beta, B, Range[0.,1.,0.1]]]<10^12, "FluFluQueue: stDistr returns wrong sojourn time distribution!"];
Assert[Norm[(qlm-qlmFromME)/qlm]<10^12, "FluFluQueue: qlMoms returns wrong queue length moments!"];
Assert[Norm[(stm-stmFromME)/stm]<10^12, "FluFluQueue: stMoms returns wrong sojourn time moments!"];
Iin = IdentityMatrix[Dimensions[Qin][[1]]];
Iout = IdentityMatrix[Dimensions[Qout][[1]]];
BuTools`Verbose = False;
{gamma, G} = FluidQueue[KroneckerProduct[Qin, Iout]+KroneckerProduct[Iin, Qout], KroneckerProduct[Rin, Iout], KroneckerProduct[Iin, Rout], "Q0", KroneckerProduct[Qin, Iout]+KroneckerProduct[Rin, PseudoInverse[Rout].Qout], "stDistrME"];
BuTools`Verbose = True;
msmall = MomentsFromME[beta, B, 5];
mlarge = MomentsFromME[gamma, G, 5];
Assert[Norm[(msmall-mlarge)/msmall]<10^12, "FluFluQueue: Large and small model do not give the same results!"];
